caterwaul.tconfiguration('std seq continuation parser','fig.parser',function (){this.field('parse',parse).field('lex',lex).field('decompile',parse),where*[parse(s)=expression(lex(s)),lex=l*[literate=peg[c(/[A-Z\|][^\n]*(?:\n[^\n]+)*/,1)>>fn_['']],paragraph=peg[c(/[^\n]*(?:\n[^\n]+)*/,1)>>fn[xs][xs[0]]],paragraphs=peg[(([c(/\n\n+/,2)]>>fn_[''])%(literate/paragraph)>>fn[xs][xs[1]])[0]>>fn[xs][seq[~xs%[_]].join('\n')]],line_comment=peg[c(/[-\/]\s*/,1)%c(/[A-Z][^\n]*/,1)%[c('\n')]>>fn_[' ']],code=peg[(line_comment/c(['-','/'])/(c(/[^-\/]+/,1)>>fn[xs][xs[0]]))[1]>>fn[xs][xs.join('')]]] in fn[s][code(paragraphs(s))],expression(x)=expression(x),identifier=peg[c(/[a-z_][A-Za-z0-9_]*['?!]*/,1)>>fn[xs][new caterwaul.syntax(xs[0])]],operator=l*[coerced_identifier=peg[c('=')%identifier>>fn[xs][xs[0]+xs[1].data]],regular_operator=peg[c(/[-+\/*&^%$#@!`~:\\|=?<>\.;]+/,1)>>fn[xs][xs[0]]]] in peg[coerced_identifier/regular_operator],group=l*[grouped_by(open,close)=peg[c(open)%[expression]%c(close)>>fn[xs][xs[1]?new caterwaul.syntax(open,xs[1]):new caterwaul.syntax(open)]]] in peg[grouped_by('(',')')/grouped_by('[',']')/grouped_by('{','}')],atom=l*[quoted_operator=peg[c('_')%operator>>fn[xs][new caterwaul.syntax(xs[0]+xs[1])]],number_options=peg[(c(/\d+/,1)%c('.')%c(/\d+(?:[eE][-+]?\d*)?/,1)>>fn[xs][new caterwaul.syntax(xs[0][0]+xs[1]+xs[2][0])])/(c(/\d+/,1)>>fn[xs][new caterwaul.syntax(xs[0])])],string_options=peg[(c(/'(?:[^'\\]|\\.?)*/,1)%c("'"))/(c(/"(?:[^"\\]|\\.?)*/,1)%c('"'))>>fn[xs][new caterwaul.syntax(xs[0][0]+xs[1])]]] in peg[quoted_operator/number_options/string_options/identifier/group],space=peg[c(/\s+/,1)],spaced(x)=peg[space%x%space>>fn[xs][xs[1]]],binary(op,l,inductive,base)=l*[p(x)=p(x),p=peg[l%[op%p]>>fn[xs][xs[1]?inductive(xs[0],xs[1][0],xs[1][1]):base?base(xs[0]):xs[0]]]] in p,prefix(op,l,inductive,base)=l*[p(x)=p(x),p=peg[(op%p>>fn[xs][inductive(xs[0],xs[1])])/(l>>fn[x][base?base(x):x])]] in p,precedence_table=l[current=0] in {}/se.r[seq[~'. */ % +- &|^ :; <> !@# `~\\ ? ='.split(/\s+/)*![seq[~_.split('')*![r[_]=current]],++current]],r['$']=1000],precedence_of(op)=/^_/.test(op)?999:seq[~op.split('')*[precedence_table[_]]/[_+_0]],binary_tree(op,l,r,t)=new caterwaul.syntax(op,l,r)/se[_.is_tight=t],unary_tree(op,r,t)=new caterwaul.syntax(op,r)/se[_.is_tight=t],cons_binary(op,l,r,t)=r.constructor===caterwaul.syntax&&r.data!=='join'&&r.is_tight===t&&r.length===2&&precedence_of(r.data)>precedence_of(op)?binary_tree(r.data,binary_tree(op,l,r.l,t),r.r,t):binary_tree(op,l,r,t),tight_join=peg[atom[1]>>fn[xs][seq[~xs/![binary_tree('join',_,_0,true)]]]],tight_prefix=peg[prefix(operator,tight_join,fn[op,r][unary_tree(op,r,true)])],tight_binary=peg[binary(seq(operator,opt(space)),tight_prefix,fn[l,op,r][cons_binary(op[0],l,r,true)])],loose_join=peg[binary(space,tight_binary,fn[l,op,r][cons_binary('join',l,r,false)])],loose_prefix=peg[prefix(seq(operator,space),loose_join,fn[op,r][unary_tree(op[0],r,false)])],loose_binary=peg[binary(spaced(operator),loose_prefix,fn[l,op,r][cons_binary(op,l,r,false)])],commas=peg[binary(seq(opt(space),c(/,\s*/,1)),loose_binary,fn[l,op,r][binary_tree(',',l,r)])],expression=commas]});