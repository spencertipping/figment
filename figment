#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__25976e07665878d3fae18f050160343f');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__25976e07665878d3fae18f050160343f
meta::meta('externalize', <<'__9141b4e8752515391385516ae94b23b5');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  $externalized_functions{$name} = $attribute;
  *{"::$name"} = $implementation || $attribute;
}
__9141b4e8752515391385516ae94b23b5
meta::meta('functor::editable', <<'__e3d2ede6edf65ffe2123584b2bd5dab7');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__e3d2ede6edf65ffe2123584b2bd5dab7
meta::meta('type::bootstrap', <<'__297d03fb32df03b46ea418469fc4e49e');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__297d03fb32df03b46ea418469fc4e49e
meta::meta('type::cached_dependency', <<'__e9455b403cbff27bbcc41d917fef482f');
meta::configure 'cached_dependency', inherit => 0, extension => '';
meta::define_form 'cached_dependency', \&meta::bootstrap::implementation;
__e9455b403cbff27bbcc41d917fef482f
meta::meta('type::configuration', <<'__d67e10a128e6b1d958c5b9d3bbe25aa4');
meta::functor::editable 'configuration', inherit => 0, extension => '.conf', default => sub {
  # Any lines starting with #, with or without leading whitespace, are treated as comments.
  # Comments are not parsed in option text; that is, you could specify an option that contained
  # a # and the # and following text would be considered part of that option.
  my ($data) = @_;
  my @options = grep /:/o && ! /^\h*#/o && ! /^\h*$/o, split(/\v+/o, $data);
  s/^\h+//o for @options;
  my @key_values = map split(/\s*:\s*/o, $_, 2), @options;
  $key_values[$_ << 1] and $key_values[$_ << 1] =~ s/\s/_/go for 0 .. @key_values >> 1;
  $key_values[$_ << 1] and $key_values[$_ << 1] = lc $key_values[$_ << 1] for 0 .. @key_values >> 1;
  @key_values;
};
__d67e10a128e6b1d958c5b9d3bbe25aa4
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::fig', 'meta::functor::editable \'fig\', default => \'edit\', extension => \'.fig\', inherit => 1;');
meta::meta('type::function', <<'__d93b3cc15693707dac518e3d6b1f5648');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__d93b3cc15693707dac518e3d6b1f5648
meta::meta('type::inc', <<'__c95915391b969734305f2f492d5ca8e3');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__c95915391b969734305f2f492d5ca8e3
meta::meta('type::internal_function', <<'__34abb44c67c7e282569e28ef6f4d62ab');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__34abb44c67c7e282569e28ef6f4d62ab
meta::meta('type::js', 'meta::functor::editable \'js\', extension => \'.js\', inherit => 1;');
meta::meta('type::library', <<'__a9c0193f297bbc96a78eb5e27727fd30');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
  meta::externalize $name, "library::$name", sub {
    edit("library::$name");
  };
};
__a9c0193f297bbc96a78eb5e27727fd30
meta::meta('type::message_color', <<'__794bf137c425293738f07636bcfb5c55');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__794bf137c425293738f07636bcfb5c55
meta::meta('type::meta', <<'__640f25635ce2365b0648962918cf9932');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__640f25635ce2365b0648962918cf9932
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__607e9931309b1b595424bedcee5dfa45');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__607e9931309b1b595424bedcee5dfa45
meta::meta('type::retriever', <<'__6e847a9d205e4a5589765a3366cdd115');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__6e847a9d205e4a5589765a3366cdd115
meta::meta('type::sdoc', <<'__392c65eddae300e2aa67014b85884979');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__392c65eddae300e2aa67014b85884979
meta::meta('type::state', <<'__c1f29670be26f1df6100ffe4334e1202');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__c1f29670be26f1df6100ffe4334e1202
meta::meta('type::template', <<'__25f4d6eafb1d3eea6d5d3d9a71a5623e');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__25f4d6eafb1d3eea6d5d3d9a71a5623e
meta::meta('type::vim_highlighter', 'meta::functor::editable \'vim_highlighter\', extension => \'.vim\', inherit => 1, default => \'edit\';');
meta::meta('type::watch', 'meta::functor::editable \'watch\', prefix => \'watch::\', inherit => 1, extension => \'.pl\', default => \'cat\';');
meta::bootstrap('initialization', <<'__8774229a1a0ce7fd056d81ba0b077f79');
#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__8774229a1a0ce7fd056d81ba0b077f79
meta::bootstrap('perldoc', <<'__c63395cbc6f7160b603befbb2d9b6700');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__c63395cbc6f7160b603befbb2d9b6700
meta::cached_dependency('caterwaul.all.js', '(function (f){return f(f)})(function (self,undefined){var qw=function (x){return x.split(/\\s+/)},id=function (x){return x},se=function (x,f){return f&&f.call(x,x)||x},gensym=(function (n,m){return function (){return \'gensym_\'+n.toString(36)+\'_\'+(++m).toString(36)}})(+new Date(),Math.random()*(1<<30)>>>0),bind=function (f,t){return f.binding===t?f:f.original?bind(f.original,t):merge(function (){return f.apply(t,arguments)},{original:f,binding:t})},map=function (f,xs){for (var i=0,ys=[],l=xs.length;i<l;++i)ys.push(f(xs[i],i));return ys},hash=function (s){for (var i=0,xs=qw(s),o={},l=xs.length;i<l;++i)o[xs[i]]=true;return annotate_keys(o)},merge=function (o){for (var i=1,l=arguments.length,_=null;_=arguments[i],i<l;++i)if (_)for (var k in _)has(_,k)&&(o[k]=_[k]);return o},extend=function (f){merge.apply(null,[f.prototype].concat(Array.prototype.slice.call(arguments,1)));return f},annotate_keys=function (o){var max=0;for (var k in o)own.call(o,k)&&(max=k.length>max?k.length:max);o._max_length=max;return o},has=function (o,p){return p&&!(p.length>o._max_length)&&p!==\'_max_length\'&&own.call(o,p)},own=Object.prototype.hasOwnProperty,_caterwaul=typeof caterwaul===\'undefined\'?undefined:caterwaul,syntax_node_inspect=function (x){return x?x.inspect():\'(<>)\'},syntax_node_tostring=function (x){return x?x.serialize?x.serialize():x.toString():\'\'},node_methods={_replace:function (n){return (n.l=this.l)&&(this.l.r=n),(n.r=this.r)&&(this.r.l=n),this},_append_to:function (n){return n&&n._append(this),this},_reparent:function (n){return this.p&&this.p[0]===this&&(this.p[0]=n),this},_fold_l:function (n){return this._append(this.l&&this.l._unlink(this))},_append:function (n){return (this[this.length++]=n)&&(n.p=this),this},_fold_r:function (n){return this._append(this.r&&this.r._unlink(this))},_sibling:function (n){return n.p=this.p,(this.r=n).l=this},_fold_lr:function (){return this._fold_l()._fold_r()},_wrap:function (n){return n.p=this._replace(n).p,this._reparent(n),delete this.l,delete this.r,this._append_to(n)},_fold_rr:function (){return this._fold_r()._fold_r()},_unlink:function (n){return this.l&&(this.l.r=this.r),this.r&&(this.r.l=this.l),delete this.l,delete this.r,this._reparent(n)},pop:function (){return --this.length,this},push:function (x){return this[this.length++]=x,this},id:function (){return this.id||(this.id=gensym())},each:function (f){for (var i=0,l=this.length;i<l;++i)f(this[i],i);return this},map:function (f){for (var n=new this.constructor(this),i=0,l=this.length;i<l;++i)n.push(f(this[i],i)||this[i]);return n},nmap:function (f){for (var n=new this.constructor(this),i=0,l=this.length,r;i<l;++i)(r=f(this[i],i))&&n.push(r);return n},reach:function (f){f(this);this.each(function (n){n&&n.reach(f)});return this},rmap:function (f){var r=f(this);return !r||r===this?this.map(function (n){return n&&n.rmap(f)}):r.data===undefined?new this.constructor(r):r},rnmap:function (f){var r=f(this);return r===this?this.nmap(function (n){return n&&n.rnmap(f)}):r&&r.data===undefined?new this.constructor(r):r},clone:function (){return this.rmap(function (){return false})},collect:function (p){var ns=[];this.reach(function (n){p(n)&&ns.push(n)});return ns},replace:function (rs){return this.rnmap(function (n){return own.call(rs,n.data)?rs[n.data]:n})},repopulated_with:function (xs){return new this.constructor(this.data,xs)},change:function (i,x){return se(new this.constructor(this.data,Array.prototype.slice.call(this)),function (n){n[i]=x})},compose_single:function (i,f){return this.change(i,f(this[i]))},traverse:function (f){f({entering:this});f({exiting:this.each(function (n){n&&n.traverse(f)})});return this},flatten:function (d){d=d||this.data;return d!==this.data?this.as(d):!(has(parse_lr,d)&&this.length)?this:has(parse_associates_right,d)?se(new this.constructor(d),bind(function (n){for (var i=this;i&&i.data===d;i=i[1])n.push(i[0]);n.push(i)},this)):se(new this.constructor(d),bind(function (n){for (var i=this,ns=[];i.data===d;i=i[0])i[1]&&ns.push(i[1]);ns.push(i);for (i=ns.length-1;i>=0;--i)n.push(ns[i])},this))},unflatten:function (){var right=has(parse_associates_right,this.data);return this.length<=2?this:se(new this.constructor(this.data),bind(function (n){if (right)for (var i=0,l=this.length-1;i<l;++i)n=n.push(this[i]).push(i<l-2?new this.constructor(this.data):this[i])[1];else for (var i=this.length-1;i>=1;--i)n=n.push(i>1?new this.constructor(this.data):this[0]).push(this[i])[0]},this))},as:function (d){return this.data===d?this:new this.constructor(d).push(this)},is_string:function (){return /[\'"]/.test(this.data.charAt(0))},as_escaped_string:function (){return this.data.substr(1,this.data.length-2)},is_number:function (){return /^-?(0x|\\d|\\.\\d+)/.test(this.data)},as_number:function (){return Number(this.data)},is_boolean:function (){return this.data===\'true\'||this.data===\'false\'},as_boolean:function (){return this.data===\'true\'},is_regexp:function (){return /^\\/./.test(this.data)},as_escaped_regexp:function (){return this.data.substring(1,this.data.lastIndexOf(\'/\'))},has_grouped_block:function (){return has(parse_r_until_block,this.data)},is_block:function (){return has(parse_block,this.data)},is_blockless_keyword:function (){return has(parse_r_optional,this.data)},is_null_or_undefined:function (){return this.data===\'null\'||this.data===\'undefined\'},is_constant:function (){return this.is_number()||this.is_string()||this.is_boolean()||this.is_regexp()||this.is_null_or_undefined()},left_is_lvalue:function (){return /=$/.test(this.data)||/\\+\\+$/.test(this.data)||/--$/.test(this.data)},is_empty:function (){return !this.length},has_parameter_list:function (){return this.data===\'function\'||this.data===\'catch\'},has_lvalue_list:function (){return this.data===\'var\'||this.data===\'const\'},is_dereference:function (){return this.data===\'.\'||this.data===\'[]\'},is_invocation:function (){return this.data===\'()\'},is_contextualized_invocation:function (){return this.is_invocation()&&this[0]&&this[0].is_dereference()},is_invisible:function (){return has(parse_invisible,this.data)},is_binary_operator:function (){return has(parse_lr,this.data)},is_prefix_unary_operator:function (){return has(parse_r,this.data)},is_postfix_unary_operator:function (){return has(parse_l,this.data)},is_unary_operator:function (){return this.is_prefix_unary_operator()||this.is_postfix_unary_operator()},accepts:function (e){return parse_accepts[this.data]&&this.accepts[parse.data]===(e.data||e)},bindings:function (hash){var result=hash||{};this.reach(function (n){if (n.binds_a_value)result[n.data]=n.value});return result},match:function (pattern){return macro_try_match(pattern,this)},ends_with_block:function (){var block_index=parse_r_until_block[this.data],block=this[block_index];return this.data===\'{\'||has(parse_r_until_block,this.data)&&(this.data!==\'function\'||this.length===3)&&block&&block.ends_with_block()},toString:function (){return this.inspect()},inspect:function (){return (this.l?\'(left) <- \':\'\')+\'(\'+this.data+(this.length?\' \'+map(syntax_node_inspect,this).join(\' \'):\'\')+\')\'+(this.r?\' -> \'+this.r.inspect():\'\')},serialize:function (){var op=this.data,right=this.r?\'/* -> \'+this.r.serialize()+\' */\':\'\',space=/\\w/.test(op.charAt(op.length-1))?\' \':\'\',s=has(parse_invisible,op)?map(syntax_node_tostring,this).join(space):has(parse_invocation,op)?map(syntax_node_tostring,[this[0],op.charAt(0),this[1],op.charAt(1)]).join(space):has(parse_ternary,op)?map(syntax_node_tostring,[this[0],op,this[1],parse_group[op],this[2]]).join(space):has(parse_group,op)?op+map(syntax_node_tostring,this).join(space)+parse_group[op]:has(parse_lr,op)?this.length?map(syntax_node_tostring,this).join(space+op+space):op:has(parse_r,op)||has(parse_r_optional,op)?op.replace(/^u/,\'\')+space+(this[0]?this[0].serialize():\'\'):has(parse_r_until_block,op)?has(parse_accepts,op)&&this[1]&&this[2]&&parse_accepts[op]===this[2].data&&!this[1].ends_with_block()?op+space+map(syntax_node_tostring,[this[0],this[1],\';\',this[2]]).join(\'\'):op+space+map(syntax_node_tostring,this).join(\'\'):has(parse_l,op)?(this[0]?this[0].serialize():\'\')+space+op:op;return right?s+right:s}},ref=extend(function (value){if (value instanceof this.constructor){this.value=value.value;this.data=value.data}else {this.value=value;this.data=gensym()}},{length:0,binds_a_value:true},node_methods),syntax_node=extend(function (data){if (data instanceof this.constructor)this.data=data.data,this.length=0;else {this.data=data&&data.toString();this.length=0;for (var i=1,l=arguments.length,_;_=arguments[i],i<l;++i)for (var j=0,lj=_.length,it,itc;_ instanceof Array?(it=_[j],j<lj):(it=_,!j);++j)this._append((itc=it.constructor)===String||itc===Number||itc===Boolean?new this.constructor(it):it)}},node_methods),lex_op=hash(\'. new ++ -- u++ u-- u+ u- typeof u~ u! ! * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? = += -= *= /= %= &= |= ^= <<= >>= >>>= : , \'+\'return throw case var const break continue void else u; ;\'),lex_table=function (s){for (var i=0,xs=[false];i<8;++i)xs.push.apply(xs,xs);for (var i=0,l=s.length;i<l;++i)xs[s.charCodeAt(i)]=true;return xs},lex_float=lex_table(\'.0123456789\'),lex_decimal=lex_table(\'0123456789\'),lex_integer=lex_table(\'0123456789abcdefABCDEFx\'),lex_exp=lex_table(\'eE\'),lex_space=lex_table(\' \\n\\r\\t\'),lex_bracket=lex_table(\'()[]{}\'),lex_opener=lex_table(\'([{\'),lex_punct=lex_table(\'+-*/%&|^!~=<>?:;.,\'),lex_eol=lex_table(\'\\n\\r\'),lex_regexp_suffix=lex_table(\'gims\'),lex_quote=lex_table(\'\\\'"/\'),lex_slash=\'/\'.charCodeAt(0),lex_star=\'*\'.charCodeAt(0),lex_back=\'\\\\\'.charCodeAt(0),lex_x=\'x\'.charCodeAt(0),lex_dot=\'.\'.charCodeAt(0),lex_zero=\'0\'.charCodeAt(0),lex_postfix_unary=hash(\'++ --\'),lex_ident=lex_table(\'$_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'),parse_reduce_order=map(hash,[\'function\',\'( [ . [] ()\',\'new delete\',\'u++ u-- ++ -- typeof u~ u! u+ u-\',\'* / %\',\'+ -\',\'<< >> >>>\',\'< > <= >= instanceof in\',\'== != === !==\',\'&\',\'^\',\'|\',\'&&\',\'||\',\'case\',\'?\',\'= += -= *= /= %= &= |= ^= <<= >>= >>>=\',\':\',\',\',\'return throw break continue void\',\'var const\',\'if else try catch finally for switch with while do\',\';\']),parse_associates_right=hash(\'= += -= *= /= %= &= ^= |= <<= >>= >>>= ~ ! new typeof u+ u- -- ++ u-- u++ ? if else function try catch finally for switch case with while do\'),parse_inverse_order=(function (xs){for (var o={},i=0,l=xs.length;i<l;++i)for (var k in xs[i])has(xs[i],k)&&(o[k]=i);return annotate_keys(o)})(parse_reduce_order),parse_index_forward=(function (rs){for (var xs=[],i=0,l=rs.length,_=null;_=rs[i],xs[i]=true,i<l;++i)for (var k in _)if (has(_,k)&&(xs[i]=xs[i]&&!has(parse_associates_right,k)))break ;return xs})(parse_reduce_order),parse_lr=hash(\'[] . () * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || = += -= *= /= %= &= |= ^= <<= >>= >>>= , : ;\'),parse_r_until_block=annotate_keys({\'function\':2,\'if\':1,\'do\':1,\'catch\':1,\'try\':1,\'for\':1,\'while\':1,\'with\':1}),parse_accepts=annotate_keys({\'if\':\'else\',\'do\':\'while\',\'catch\':\'finally\',\'try\':\'catch\'}),parse_invocation=hash(\'[] ()\'),parse_r_optional=hash(\'return throw break continue else\'),parse_also_expression=hash(\'function\'),parse_r=hash(\'u+ u- u! u~ u++ u-- new typeof finally var const void delete\'),parse_block=hash(\'; {\'),parse_invisible=hash(\'i;\'),parse_l=hash(\'++ --\'),parse_group=annotate_keys({\'(\':\')\',\'[\':\']\',\'{\':\'}\',\'?\':\':\'}),parse_ambiguous_group=hash(\'[ (\'),parse_ternary=hash(\'?\'),parse_not_a_value=hash(\'function if for while catch\'),parse=function (input){var s=input.toString(),mark=0,c=0,re=true,esc=false,dot=false,exp=false,close=0,t=\'\',i=0,l=s.length,cs=function (i){return s.charCodeAt(i)},grouping_stack=[],gs_top=null,head=null,parent=null,indexes=map(function (){return []},parse_reduce_order),invocation_nodes=[],all_nodes=[],new_node=function (n){return all_nodes.push(n),n},push=function (n){return head?head._sibling(head=n):(head=n._append_to(parent)),new_node(n)};while ((mark=i)<l){while (lex_space[c=cs(i)]&&i<l)mark=++i;esc=exp=dot=t=false;if (lex_bracket[c]){t=!!++i;re=lex_opener[c]}else if (c===lex_slash&&cs(i+1)===lex_star&&(i+=2)){while (++i<l&&cs(i)!==lex_slash||cs(i-1)!==lex_star);t=!++i}else if (c===lex_slash&&cs(i+1)===lex_slash){while (++i<l&&!lex_eol[cs(i)]);t=false}else if (lex_quote[c]&&(close=c)&&re&&!(re=!(t=s.charAt(i)))){while (++i<l&&(c=cs(i))!==close||esc)esc=!esc&&c===lex_back;while (++i<l&&lex_regexp_suffix[cs(i)]);t=true}else if (c===lex_zero&&lex_integer[cs(i+1)]){while (++i<l&&lex_integer[cs(i)]);re=!(t=true)}else if (lex_float[c]&&(c!==lex_dot||lex_decimal[cs(i+1)])){while (++i<l&&(lex_decimal[c=cs(i)]||(dot^(dot|=c===lex_dot))||(exp^(exp|=lex_exp[c]&&++i))));while (i<l&&lex_decimal[cs(i)])++i;re=!(t=true)}else if (lex_punct[c]&&(t=re?\'u\':\'\',re=true)){while (i<l&&lex_punct[cs(i)]&&has(lex_op,t+s.charAt(i)))t+=s.charAt(i++);re=!has(lex_postfix_unary,t)}else {while (++i<l&&lex_ident[cs(i)]);re=has(lex_op,t=s.substring(mark,i))}if (i===mark)throw new Error(\'Caterwaul lex error at "\'+s.substr(mark,40)+\'" with leading context "\'+s.substr(mark-40,40)+\'" (probably a Caterwaul bug)\');if (t===false)continue ;t=t===true?s.substring(mark,i):t===\'u;\'?\';\':t;t===gs_top?(grouping_stack.pop(),gs_top=grouping_stack[grouping_stack.length-1],head=head?head.p:parent,parent=null):(has(parse_group,t)?(grouping_stack.push(gs_top=parse_group[t]),parent=push(new_node(new syntax_node(t))),head=null):push(new_node(new syntax_node(t))),has(parse_inverse_order,t)&&indexes[parse_inverse_order[t]].push(head||parent));re|=t===\')\'&&head.l&&has(parse_r_until_block,head.l.data)}for (var i=0,l=indexes.length,forward,_;_=indexes[i],forward=parse_index_forward[i],i<l;++i)for (var j=forward?0:_.length-1,lj=_.length,inc=forward?1:-1,node,data;node=_[j],data=node&&node.data,forward?j<lj:j>=0;j+=inc)if (has(parse_lr,data))node._fold_lr();else if (has(parse_ambiguous_group,data)&&node.l&&(node.l.data===\'.\'||!(has(lex_op,node.l.data)||has(parse_not_a_value,node.l.data))))invocation_nodes.push(node.l._wrap(new_node(new syntax_node(data+parse_group[data]))).p._fold_r());else if (has(parse_l,data))node._fold_l();else if (has(parse_r,data))node._fold_r();else if (has(parse_ternary,data)){node._fold_lr();var temp=node[1];node[1]=node[0];node[0]=temp}else if (has(parse_r_until_block,data)&&node.r&&node.r.data!==\':\'){for (var count=0,limit=parse_r_until_block[data];count<limit&&node.r&&!has(parse_block,node.r.data);++count)node._fold_r();node.r&&node.r.data!==\';\'&&node._fold_r();if (has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.r&&node.r.r.data))node._fold_r().pop()._fold_r();else if (has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.data))node._fold_r()}else if (has(parse_r_optional,data))node.r&&node.r.data!==\';\'&&node._fold_r();for (var i=all_nodes.length-1,_;_=all_nodes[i],i>=0;--i)_.r&&_._wrap(new syntax_node(\'i;\')).p._fold_r();for (var i=0,l=invocation_nodes.length,_,child;_=invocation_nodes[i],i<l;++i)(child=_[1]=_[1][0])&&(child.p=_);while (head.p)head=head.p;for (var i=all_nodes.length-1;i>=0;--i)delete all_nodes[i].p;return head},macro_array_push=Array.prototype.push,macro_try_match=function (pattern,t){if (pattern.data===\'_\')return [t];if (pattern.data!==t.data||pattern.length!==t.length)return null;for (var i=0,l=pattern.length,wildcards=[],match=null;i<l;++i)if (match=macro_try_match(pattern[i],t[i]))macro_array_push.apply(wildcards,match);else return null;return wildcards},macro_expand=function (t,macros,expanders,context){return t.rmap(function (n){for (var i=macros.length-1,macro,match,replacement;i>=0&&(macro=macros[i]);--i)if ((match=macro_try_match(macro,n))&&(replacement=expanders[i].apply(context,match)))return replacement})},compile=function (tree,environment){var vars=[],values=[],bindings=merge({},environment||{},tree.bindings()),s=gensym();for (var k in bindings)if (has(bindings,k))vars.push(k),values.push(bindings[k]);var code=map(function (v){return \'var \'+v+\'=\'+s+\'.\'+v},vars).join(\';\')+\';return(\'+tree.serialize()+\')\';try {return (new Function(s,code))(bindings)}catch (e){throw new Error(\'Caught \'+e+\' while compiling \'+code)}},associator_for=function (f){return function (name,behavior,value){return f[name]=(f.behaviors[f.attributes[name]=behavior]||id).call(f,value),f}},shallow_copy=function (x){return x&&(x.constructor===Array?x.slice():x.clone?x.clone():merge({},x))},copy_of=function (f){var g=merge(function (){return g.init.apply(g,arguments)},{behaviors:shallow_copy(f.behaviors),attributes:{}});return se(g,function (g){(g.associate=associator_for(g))(\'behavior\',\'method\',function (name,definition){this.behaviors[name]=definition;return this.associate(name,\'method\',function (attribute,value){return this.associate(attribute,name,value)})}).behavior(\'method\',g.behaviors.method);for (var k in f.attributes)has(f.attributes,k)&&g.associate(k,f.attributes[k],f[k])})},replica=se(function (){return copy_of({behaviors:{method:function (v){return bind(v,this)}}}).behavior(\'field\').behavior(\'shallow\',shallow_copy)},function (f){f.init=f}),configurable=function (f){return f.shallow(\'configurations\',{}).shallow(\'has\',{}).method(\'configuration\',function (name,f){this.configurations[name]=f;return this}).method(\'namespace\',function (s){return this[s]||this.shallow(s,{})[s]}).method(\'clone\',function (){return arguments.length?this.clone().configure.apply(null,arguments):copy_of(this)}).method(\'configure\',function (){for (var i=0,l=arguments.length,_;_=arguments[i],i<l;++i)if (_.constructor===String)for (var cs=qw(arguments[i]),j=0,lj=cs.length;_=cs[j],j<lj;++j)if (this.configurations[_])this.has[_]||(this.has[_]=this.configurations[_].call(this,this)||this);else throw new Error(\'error: configuration "\'+_+\'" does not exist\');else _ instanceof Array?this.configure.apply(this,_.slice()):_.call(this,this);return this})},macroexpansion=function (f){return f.shallow(\'macro_patterns\',[]).method(\'macro\',function (pattern,expansion){return this.macro_patterns.push(pattern),this.macro_expanders.push(expansion),this}).shallow(\'macro_expanders\',[]).method(\'macroexpand\',function (t){return macro_expand(t,this.macro_patterns,this.macro_expanders,this)}).method(\'rmacro\',function (pattern,expander){if (!expander.apply)throw new Error(\'rmacro: Cannot define macro with non-function expander\');else return this.macro(pattern,function (){var t=expander.apply(this,arguments);return t&&this.macroexpand(t)})})},caterwaul_core=function (f){return configurable(f).configure(macroexpansion).method(\'tconfiguration\',function (configs,name,f){this.configurations[name]=this.clone(configs)(f);return this}).field(\'syntax\',syntax_node).field(\'ref\',ref).field(\'parse\',parse).field(\'compile\',compile).field(\'gensym\',gensym).field(\'map\',map).field(\'self\',self).field(\'macroexpansion\',macroexpansion).field(\'replica\',replica).field(\'configurable\',configurable).field(\'caterwaul\',caterwaul_core).field(\'decompile\',parse).method(\'init\',function (f){return this.compile(this.macroexpand(this.decompile(f)))}).field(\'global\',function (){return caterwaul_global}).method(\'reinitialize\',function (transform,erase_configurations){var c=transform(this.self),result=c(c).deglobalize();erase_configurations||(result.configurations=this.configurations);return result}).shallow(\'util\',{extend:extend,merge:merge,se:se,macro_try_match:macro_try_match,id:id,bind:bind,map:map,qw:qw}).method(\'magic\',(function (table){return function (name){return table[name]||(table[name]={})}})({}))},caterwaul_global=caterwaul=caterwaul_core(merge(replica(),{deglobalize:function (){caterwaul=_caterwaul;return this}}));return caterwaul_global});caterwaul.configuration(\'std.qs\',function (){this.macro(this.parse(\'qs[_]\'),function (tree){return new this.ref(tree)}).macro(this.parse(\'qse[_]\'),function (tree){return new this.ref(this.macroexpand(tree))}).macro(this.parse(\'literal[_]\'),function (tree){return tree})}).tconfiguration(\'std.qs\',\'std.qg\',function (){this.rmacro(qs[qg[_]],function (expression){return expression.as(\'(\')})}).tconfiguration(\'std.qs std.qg\',\'std.fn\',function (){this.configure(\'std.qg\').rmacro(qs[fn[_][_]],function (vars,expression){return qs[qg[function (vars){return expression}]].replace({vars:vars,expression:expression})}).rmacro(qs[fn_[_]],function (expression){return qs[qg[function (){return expression}]].replace({expression:expression})}).rmacro(qs[fb[_][_]],function (vars,expression){return qse[fn[_t][fn_[fn[vars][e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),vars:vars,e:expression})}).rmacro(qs[fb_[_]],function (expression){return qse[fn[_t][fn_[fn_[e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),e:expression})}).rmacro(qs[fc[_][_]],function (vars,body){return qse[qg[fn[vars][body,undefined]]].replace({vars:vars,body:body})}).rmacro(qs[fc_[_]],function (body){return qse[qg[fn[vars][body,undefined]]].replace({body:body})})}).tconfiguration(\'std.qs std.qg std.fn\',\'std.obj\',function (){this.configure(\'std.qg std.fn\').rmacro(qs[_/mb/_],fn[object,method][qse[qg[fn[_o][_o.m&&fn_[_o.m.apply(_o,arguments)]]](o)].replace({_o:this.gensym(),o:object,m:method})]).rmacro(qs[_/mb[_]],fn[object,method][qse[qg[fn[_o,_m][_o[_m]&&fn_[_o[_m].apply(_o,arguments)]]](o,m)].replace({_o:this.gensym(),_m:this.gensym(),o:object,m:method})]).rmacro(qs[_/se._[_]],fn[v,n,b][qse[qg[fn[n][b,n]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/se[_]],fn[v,b][qse[v/se._[b]].replace({b:b,v:v})]).rmacro(qs[_/re._[_]],fn[v,n,b][qse[qg[fn[n][b]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/re[_]],fn[v,b][qse[v/re._[b]].replace({b:b,v:v})])}).tconfiguration(\'std.qs std.qg std.fn\',\'std.bind\',function (){this.configure(\'std.qg\');var lf=fb[form][this.rmacro(form,l_expander)],lsf=fb[form][this.rmacro(form,l_star_expander)],l_star_expander=fb[vars,expression][qs[qg[function (){var vars;return expression}].call(this)].replace({vars:this.macroexpand(vars),expression:expression})],l_expander=fb[vars,expression][vars=this.macroexpand(vars).flatten(\',\'),qs[qg[function (vars){return e}].call(this,values)].replace({vars:vars.map(fn[n][n[0]]).unflatten(),e:expression,values:vars.map(fn[n][n[1]]).unflatten()})];lf(qs[l[_] in _]),lf(qs[l[_][_]]),lf(this.parse(\'let [_] in _\')),lf(this.parse(\'let [_][_]\')).rmacro(qs[_,where[_]],fn[expression,vars][l_expander(vars,expression)]);lsf(qs[l*[_] in _]),lsf(qs[l*[_][_]]),lsf(this.parse(\'let*[_] in _\')),lsf(this.parse(\'let*[_][_]\')).rmacro(qs[_,where*[_]],fn[expression,vars][l_star_expander(vars,expression)])}).tconfiguration(\'std.qs std.qg std.fn\',\'std.lvalue\',function (){this.rmacro(qs[_(_)=_],fn[base,params,value][qs[base=qg[function (params){return value}]].replace({base:base,params:params,value:value})])}).tconfiguration(\'std.qs std.fn\',\'std.cond\',function (){this.configure(\'std.qg\').rmacro(qs[_,when[_]],fn[expression,cond][qs[qg[l]&&qg[r]].replace({l:cond,r:expression})]).rmacro(qs[_,unless[_]],fn[expression,cond][qs[!qg[l]&&qg[r]].replace({l:cond,r:expression})])}).tconfiguration(\'std.qs std.fn std.bind std.lvalue\',\'std.defmacro\',function (){l[wildcard(n)=n.data.constructor===String&&n.data.charAt(0)===\'_\'&&\'_\'] in this.macro(qs[defmacro[_][_]],fn[pattern,expansion][this.rmacro(pattern,this.compile(this.macroexpand(expansion))),qs[null]]).macro(qs[defsubst[_][_]],fn[pattern,expansion][this.rmacro(pattern.rmap(wildcard),l[wildcards=pattern.collect(wildcard)] in fn_[l[hash={},as=arguments][this.util.map(fn[v,i][hash[v.data]=as[i]],wildcards),expansion.replace(hash)]]),qs[null]])}).tconfiguration(\'std.qs std.fn std.bind\',\'std.with_gensyms\',function (){this.rmacro(qs[with_gensyms[_][_]],fn[vars,expansion][l[bindings={}][vars.flatten(\',\').each(fb[v][bindings[v.data]=this.gensym()]),qs[qs[_]].replace({_:expansion.replace(bindings)})]])}).tconfiguration(\'std.qs std.fn\',\'std.compile_eval\',function (){this.macro(qs[compile_eval[_]],fn[e][new this.ref(this.compile(this.macroexpand(qs[fn_[_]].replace({_:e}))).call(this))])}).tconfiguration(\'std.qs std.fn\',\'std.ref\',function (){this.macro(qs[caterwaul],fn_[new this.ref(this)])}).tconfiguration(\'std.qs std.bind std.lvalue\',\'std.locally\',function (){l*[t=this,handler(c,e)=t.clone(c.is_string()?c.as_escaped_string():c.data).macroexpand(e)] in this.macro(qs[locally[_][_]],handler).macro(qs[locally._[_]],handler)}).tconfiguration(\'std.qs std.fn std.bind\',\'std.string\',function (){this.rmacro(qs[_],fn[string][string.is_string()&&/#\\{[^\\}]+\\}/.test(string.data)&&l*[q=string.data.charAt(0),s=string.as_escaped_string(),eq=new RegExp(\'\\\\\\\\\'+q,\'g\'),strings=s.split(/#\\{[^\\}]+\\}/),xs=[],result=new this.syntax(\'+\')][s.replace(/#\\{([^\\}]+)\\}/g,fn[_,s][xs.push(s),\'\']),this.util.map(fb[x,i][result.push(new this.syntax(q+(i<strings.length?strings[i]:\'\')+q)).push(new this.syntax(\'(\',this.parse(xs[i].replace(eq,q))))],xs),new this.syntax(\'(\',result.push(new this.syntax(q+(xs.length<strings.length?strings[strings.length-1]:\'\')+q)).unflatten())]])}).configuration(\'std\',function (){this.configure(\'std.qs std.qg std.bind std.lvalue std.cond std.fn std.obj std.defmacro std.with_gensyms std.ref std.locally std.compile_eval std.string\')});caterwaul.tconfiguration(\'std\',\'opt.unroll\',function (){this.rmacro(qs[opt.unroll[_,_][_]],fn[variable,iterations,body][with_gensyms[l,rs,es,j][qg[function (l){for (var rs=l>=0&&l>>3,es=l>=0&&l&7,_i_=0;_i_<es;++_i_)_body_;for (var j=0;j<rs;++j){_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++};return l}].call(this,_iterations_)].replace({_i_:variable,_body_:body,_iterations_:iterations})])});caterwaul.configuration(\'opt\',function (){this.configure(\'opt.unroll\')});caterwaul.configuration(\'continuation.core\',function (){this.shallow(\'continuation\',{})}).tconfiguration(\'std\',\'continuation.unwind\',function (){this.configure(\'std.fn continuation.core\').continuation/se[_.unwind_protect=function (escape,f){try {return f()}catch (e){return escape(e)}},_.unwind=function (e){throw e}];this.rmacro(qs[unwind_protect[_][_]],fn[escape,body][qse[_f(fb[e][_escape],fb_[_body])].replace({_f:new this.ref(this.continuation.unwind_protect),_escape:escape,_body:body})]).rmacro(qs[unwind[_]],fn[e][qs[_f(_e)].replace({_f:new this.ref(this.continuation.unwind),_e:e})])}).tconfiguration(\'std\',\'continuation.cps\',function (){l*[cps_convert(v,f,b,bound)=qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v.as(\'(\')[0],_b:b}),_f:f}),l_cps_def(t,form,bound)=l[inductive(cs,v,f,b)=qs[l/cps[cs][_f]].replace({cs:cs,_f:cps_convert(v,f,b,bound)}),base(v,f,b)=cps_convert(v,f,b,bound)] in t.rmacro(qs[l/_form[_,_<-_] in _].replace({_form:form}),inductive).rmacro(caterwaul.parse(\'let/#{form.serialize()}[_, _ <- _] in _\'),inductive).rmacro(qs[l/_form[_<-_] in _].replace({_form:form}),base).rmacro(caterwaul.parse(\'let/#{form.serialize()}[   _ <- _] in _\'),base).rmacro(qs[l/_form[_,_<-_][_]].replace({_form:form}),inductive).rmacro(caterwaul.parse(\'let/#{form.serialize()}[_, _ <- _][_]\'),inductive).rmacro(qs[l/_form[_<-_][_]].replace({_form:form}),base).rmacro(caterwaul.parse(\'let/#{form.serialize()}[   _ <- _][_]\'),base),cps_def(t,form,bound)=t.rmacro(qs[_/_form[_]].replace({_form:form}),fn[f,b][qse[_f/_form._[_b]].replace({_form:form,_f:f,_b:b})]).rmacro(qs[_/_form._[_]].replace({_form:form}),fn[f,v,b][qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v,_b:b}),_f:f})])] in this.configure(\'std.fn continuation.core\')/se[cps_def(_,qs[cps],false),cps_def(_,qs[cpb],true),l_cps_def(_,qs[cps],false),l_cps_def(_,qs[cpb],true)]}).tconfiguration(\'std\',\'continuation.delimited\',function (){l[magic=this.configure(\'continuation.core\').continuation.magic=this.magic(\'continuation.delimited\')] in this.continuation/se[_.call_cc=function (f){var escaped=false,cc=function (x){escaped=true;throw x},frame={magic:magic,continuation:f,parameters:[cc]};try {while ((frame=frame.continuation.apply(this,frame.parameters))&&frame&&frame.magic===magic);return frame}catch (e){if (escaped)return e;else throw e}},_.call_tail()={magic:magic,continuation:this,parameters:arguments}];this.rmacro(qs[call/cc[_]],fn[f][qs[qg[_call_cc.call(this,_f)]].replace({_call_cc:new this.ref(this.continuation.call_cc),_f:f})]).rmacro(qs[call/tail[_(_)]],fn[f,args][qs[qg[_call_tail.call(_f,_args)]].replace({_call_tail:new this.ref(this.continuation.call_tail),_f:f,_args:args})])}).configuration(\'continuation\',function (){this.configure(\'continuation.core continuation.unwind continuation.cps continuation.delimited\')});caterwaul.tconfiguration(\'std\',\'seq.core\',function (){this.shallow(\'seq\',{core:fn_[null]/se[_.prototype=[]/se.p[p.constructor=_]]})}).tconfiguration(\'std opt\',\'seq.finite.core\',function (){this.configure(\'seq.core\').seq.finite=fc[xs][this.length=this.l=xs?opt.unroll[i,xs.size?xs.size():xs.length][this[i]=xs[i]]:0]/se.c[c.prototype=new this.seq.core()/se[_.size()=this.l||this.length,_.slice()=[]/se[opt.unroll[i,this.size()][_.push(this[i])]],_.constructor=c]]}).tconfiguration(\'std\',\'seq.finite.serialization\',function (){this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.toString()=\'seq[#{this.slice().join(", ")}]\',_.join(x)=this.slice().join(x)]}).tconfiguration(\'std opt\',\'seq.finite.mutability\',function (){l[push=Array.prototype.push,slice=Array.prototype.slice] in this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.push()=l[as=arguments] in opt.unroll[i,as.length][this[this.l++]=as[i]]/re[this.length=this.l,this],_.pop()=this[--this.l]/se[delete this[this.length=this.l]],_.concat(xs)=new this.constructor(this)/se[_.push.apply(_,slice.call(xs))]]}).tconfiguration(\'std\',\'seq.finite.object\',function (){l[own=Object.prototype.hasOwnProperty] in this.configure(\'seq.finite.core\').seq.finite/se[_.keys(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(k)})()],_.values(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(o[k])})()],_.pairs(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push([k,o[k]])})()],_.prototype.object(o)=(o||{})/se[this.each(fn[p][_[p[0]]=p[1]])]]}).tconfiguration(\'std opt\',\'seq.finite.traversal\',function (){this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite.prototype/se[_.map(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(f.call(this,this[i],i))]],_.filter(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(this[i]),when[f.call(this,this[i],i)]]],_.each(f)=this/se[opt.unroll[i,_.l][f.call(_,_[i],i)]],_.reversed()=new this.constructor()/se[l[l=this.l] in opt.unroll[i,l][_.push(this[l-i-1])]],_.flat_map(f)=new this.constructor()/se[this.each(fn[x,xi][(f.call(this,x,xi)/re.xs[xs.each?xs:new this.constructor(xs)]).each(fn[x][_.push(x)])])],_.foldl(f,x)=l[x=arguments.length>1?x:this[0],xi=2-arguments.length][opt.unroll[i,this.l-xi][x=f.call(this,x,this[i+xi],i+xi)],x,when[this.l>=xi]],_.foldr(f,x)=l[x=arguments.length>1?x:this[this.l-1],xi=3-arguments.length,l=this.l][opt.unroll[i,l-(xi-1)][x=f.call(this,this[l-(i+xi)],x,l-(i+xi))],x,when[l>=xi-1]]]}).tconfiguration(\'std opt\',\'seq.finite.zip\',function (){this.configure(\'seq.finite.traversal\').seq.finite/se[l[seq=_,slice=Array.prototype.slice][_.prototype.zip()=l[as=new seq([this].concat(slice.call(arguments))),options={f:fn_[new seq(arguments)],outer:false}][caterwaul.util.merge(options,as.pop()),when[as[as.size()-1].constructor===Object],l[l=as.map(fn[x][x.size?x.size():x.length]).foldl(options.outer?fn[x,y][Math.max(x,y)]:fn[x,y][Math.min(x,y)]),f=options.f] in new this.constructor()/se[opt.unroll[i,l][_.push(f.apply({i:i},as.map(fn[x][x[i]]).slice()))]]]]]}).tconfiguration(\'std opt continuation\',\'seq.finite.quantification\',function (){this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.exists(f)=call/cc[fb[cc][opt.unroll[i,this.l][f.call(this,this[i],i)/re[_&&cc(_)]],false]],_.forall(f)=!this.exists(fn_[!f.apply(this,arguments)])]}).tconfiguration(\'std\',\'seq.infinite.core\',function (){this.configure(\'seq.core\').seq.infinite=fn_[null]/se[_.prototype=new this.seq.core()/se[_.constructor=ctor],where[ctor=_]]/se[_.def(name,ctor,h,t)=i[name]=ctor/se[_.prototype=new i()/se[_.h=h,_.t=t,_.constructor=ctor]],where[i=_],_.def(\'cons\',fn[h,t][this._h=h,this._t=t],fn_[this._h],fn_[this._t]),_.def(\'k\',fn[x][this._x=x],fn_[this._x],fn_[this])]}).tconfiguration(\'std\',\'seq.infinite.y\',function (){this.configure(\'seq.infinite.core\').seq.infinite.def(\'y\',fc[f,x][this._f=f,this._x=x],fn_[this._x],fn_[new this.constructor(this._f,this._f(this._x))])}).tconfiguration(\'std continuation\',\'seq.infinite.transform\',function (){this.configure(\'seq.infinite.core\').seq.infinite/se[_.prototype.map(f)=new _.map(f,this),_.def(\'map\',fc[f,xs][this._f=f,this._xs=xs],fn_[this._f(this._xs.h())],fn_[new this.constructor(this._f,this._xs.t())]),_.prototype.filter(f)=new _.filter(f,this),_.def(\'filter\',fc[f,xs][this._f=f,this._xs=l*[next(s)(cc)=f(s.h())?cc(s):call/tail[next(s.t())(cc)]] in call/cc[next(xs)]],fn_[this._xs.h()],fn_[new this.constructor(this._f,this._xs.t())])]}).tconfiguration(\'std continuation\',\'seq.infinite.traversal\',function (){l[finite=this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite] in this.configure(\'seq.infinite.core\').seq.infinite.prototype/se[_.drop(f)=l*[next(s)(cc)=f(s.h())?call/tail[next(s.t())(cc)]:cc(s)] in call/cc[next(this)],_.take(f)=l*[xs=new finite(),next(s)(cc)=l[h=s.h()][f(h)?(xs.push(h),call/tail[next(s.t())(cc)]):cc(xs)]] in call/cc[next(this)]]}).tconfiguration(\'std opt continuation\',\'seq.dsl\',function (){this.configure(\'seq.core seq.infinite.y seq.finite.core seq.finite.zip seq.finite.traversal seq.finite.mutability\').seq.dsl=caterwaul.global().clone()/se[_.prefix_substitute(tree,prefix)=tree.rmap(fn[n][new n.constructor(\'#{prefix}#{n.data.substring(1)}\'),when[n.data.charAt(0)===\'_\']]),_.define_functional(op,expansion,xs)=trees_for(op).map(fn[t,i][_.macro(t,fn[l,v,r][expansion.replace({x:_.macroexpand(l),y:i<4?qs[fn[xs][y]].replace({xs:_.prefix_substitute(xs,i&1?v.data:\'_\'),y:(i&2?_.macroexpand:fn[x][x])(r||v)}):v})])]),_.define_functional/se[_(\'%\',qs[x.filter(y)],qs[_,_i]),_(\'*\',qs[x.map(y)],qs[_,_i]),_(\'/\',qs[x.foldl(y)],qs[_,_0,_i]),_(\'%!\',qs[x.filter(c(y))].replace({c:not}),qs[_,_i]),_(\'*!\',qs[x.each(y)],qs[_,_i]),_(\'/!\',qs[x.foldr(y)],qs[_,_0,_i]),_(\'&\',qs[x.forall(y)],qs[_,_i]),_(\'|\',qs[x.exists(y)],qs[_,_i]),_(\'-\',qs[x.flat_map(y)],qs[_,_i]),_(\'>>\',qs[x.drop(y)],qs[_]),_(\'<<\',qs[x.take(y)],qs[_]),_(\'>>>\',qs[new r(y,x)].replace({r:new this.ref(this.seq.infinite.y)}),qs[_])],seq(qw(\'> < >= <= == !=\')).each(fn[op][_.macro(qs[_+_].clone()/se[_.data=op],rxy(qs[x.size()+y.size()].clone()/se[_.data=op]))]),l[e(x)=_.macroexpand(x)] in _.macro/se[_(qs[_&&_],rxy(qse[qg[l[xp=x][xp&&xp.size()?y:xp]]])),_(qs[_||_],rxy(qse[qg[l[xp=x][xp&&xp.size()?xp:y]]])),_(qs[_===_],rxy(qs[qg[l[xp=x,yp=y][xp===yp||xp.size()===yp.size()&&xp.zip(yp).forall(fn[p][p[0]===p[1]])]]])),_(qs[_!==_],rxy(qs[qg[l[xp=x,yp=y][xp!==yp&&(xp.size()!==yp.size()||xp.zip(yp).exists(fn[p][p[0]!==p[1]]))]]])),_(qs[_^_],rxy(qs[x.zip(y)])),_(qs[_+_],rxy(qs[x.concat(y)])),_(qs[!_],rxy(qs[x.object()])),_(qs[_,_],rxy(qs[x,y])),_(qs[~_],rxy(qs[new r(x)].as(\'(\').replace({r:new this.ref(this.seq.finite)}))),_(qs[_?_:_],fn[x,y,z][qs[x?y:z].replace({x:e(x),y:e(y),z:e(z)})]),l[rx(t)(x,y)=t.replace({x:e(x),y:y})][_(qs[_(_)],rx(qs[x(y)])),_(qs[_[_]],rx(qs[x[y]])),_(qs[_._],rx(qs[x.y])),_(qs[_].as(\'(\'),rx(qs[qg[x]]))],_(qs[+_],fn[x][x]),seq(qw(\'sk sv sp\')).zip(qw(\'keys values pairs\')).each(fb[p][_(qs[p[_]].replace({p:p[0]}),fb[x][qs[r(x)].replace({r:new this.ref(this.seq.finite[p[1]]),x:x})])])],this.rmacro(qs[seq[_]],_.macroexpand),where*[template(op)(t)=qs[_+x].replace({x:t})/se[_.data=op],qw=caterwaul.util.qw,not=new this.ref(fn[f][fn_[!f.apply(this,arguments)]]),trees_for(op)=op.charAt(op.length-1)===\'!\'?seq([qs[![_]],qs[!_[_]],qs[!~[_]],qs[!~_[_]],qs[!+_]]).map(template(op.substring(0,op.length-1))):seq([qs[[_]],qs[_[_]],qs[~[_]],qs[~_[_]],qs[+_]]).map(template(op)),rxy(tree)(x,y)=tree.replace({x:_.macroexpand(x),y:y&&_.macroexpand(y)}),seq=fb[xs][new this.seq.finite(xs)]]]}).configuration(\'seq\',function (){this.configure(\'seq.core seq.finite.core seq.finite.object seq.finite.mutability seq.finite.traversal seq.finite.zip seq.finite.quantification \'+\'seq.finite.serialization seq.infinite.core seq.infinite.y seq.infinite.transform seq.infinite.traversal seq.dsl\')});caterwaul.tconfiguration(\'std seq\',\'heap\',function (){this.heap(less)=fc_[null]/se.c[c.prototype=new caterwaul.seq.finite()/se[_.constructor=c]/se[_.insert(x)=this.push(x).heapify_up(this.size()-1),_.root()=this[0],_.rroot()=this[0]/se[this.pop()/se[this[0]=_,this.heapify_down(0),when[this.size()]]],_.swap(i,j)=this/se[_[j]=_[i],_[i]=temp,where[temp=_[j]]],_.heapify_up(i)=this/se[_.swap(i,p).heapify_up(p),when[less.call(_,_[i],_[p])],where[p=i>>1]],_.heapify_down(i)=this/se[_.swap(lr,i).heapify_down(lr),unless[lr===i],where*[s=_.size(),r=i+1<<1,l=r-1,ll=l<s&&less.call(_,_[l],_[i])?l:i,lr=r<s&&less.call(_,_[r],_[ll])?r:ll]]]]});caterwaul.tconfiguration(\'std seq continuation\',\'memoize\',function (){this.namespace(\'memoize\')/se.m[m.wrap(f)=fn_[l[as=arguments,start=+new Date()] in unwind_protect[{error:e}][{result:f.apply(this,as)}]/se[_.time=+new Date()-start]]/se[_.original=f],m.perform(result)=result.error?unwind[result.error]:result.result,m.from(proxy)=fn[f][l[state={},g=m.wrap(f)] in fn_[m.perform(proxy.call(state,this,arguments,g))]]]});caterwaul.tconfiguration(\'std seq continuation memoize\',\'parser.core\',function (){this.namespace(\'parser\')/se[_.parse_state(input,i,result,memo)=undefined/se[this.input=input,this.i=i,this.result=result,this.memo=memo],_.parse_state/se.s[s.from_input(input)=new _.parse_state(input,0,null,{}),s.prototype/se[_.accept(n,r)=new this.constructor(this.input,n,r,this.memo),_.has_input()=this.i<this.input.length,_.toString()=\'ps[#{this.input.substr(this.i)}, #{this.r}]\']],_.memoize=caterwaul.memoize.from(fn[c,as,f][k in m?m[k]:(m[k]=f.apply(c,as)),where[k=\'#{f.original.memo_id}|#{as[0].i}\',m=as[0].memo||(as[0].memo={})]]),_.promote_non_states(f)=fn[state][state instanceof _.parse_state?f.call(this,state):f.call(this,_.parse_state.from_input(state))/re[_&&_.result]],_.identify(f)=f/se[_.memo_id=caterwaul.gensym()],_.parser(f)=_.promote_non_states(_.memoize(_.identify(f))),_.defparser(name,f)=_.parsers[name]()=_.parser(f.apply(this,arguments)),_.parsers={}]}).tconfiguration(\'std seq continuation\',\'parser.c\',function (){this.configure(\'parser.core\').parser.defparser(\'c\',fn[x,l][x.constructor===String?fn[st][st.accept(st.i+x.length,x),when[x===st.input.substr(st.i,x.length)]]:x instanceof Array?l[index=index_entries(x)] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,_)]]:x.constructor===RegExp?l[x=add_absolute_anchors_to(x)] in fn[st][fail_length(x,st.input,st.i,l)/re[_>l&&split_lengths(x,st.input,st.i,l,_)/re[st.accept(st.i+_,x.exec(st.input.substr(st.i,_)))]]]:x.constructor===Function?fn[st][x.call(st,st.input,st.i)/re[_&&st.accept(st.i+_,st.input.substr(st.i,_))]]:l[index=index_entries(seq[sk[x]])] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,x[_])]],where*[check_index(i,s,p)=seq[i|[_[\'@#{s}\']&&s,where[s=s.substr(p,_.length)]]],index_entries(xs)=l*[xsp=seq[~xs],ls=seq[sk[seq[!(xsp*[[_.length,true]])]]*[Number(_)]]] in seq[~ls.slice().sort(fn[x,y][y-x])*~l[!(xsp%[_.length===l]*[[\'@#{_}\',true]]+[[\'length\',l]])]],add_absolute_anchors_to(x)=l[parts=/^\\/(.*)\\/(\\w*)$/.exec(x.toString())] in new RegExp(\'^#{parts[1]}$\',parts[2]),fail_length(re,s,p,l)=re.test(s.substr(p,l))?p+(l<<1)<=s.length?fail_length(re,s,p,l<<1):l<<1:l,split_lengths(re,s,p,l,u)=l*[b(cc,l,u)=l+1<u?(l+(u-l>>1))/re.m[re.test(s.substr(p,m))?call/tail[b(cc,m,u)]:call/tail[b(cc,l,m)]]:l] in call/cc[fn[cc][b(cc,l,u)]]]])}).tconfiguration(\'std opt seq continuation\',\'parser.seq\',function (){this.configure(\'parser.core\').parser.defparser(\'seq\',fn_[l[as=arguments] in fn[state][call/cc[fn[cc][opt.unroll[i,as.length][(state=as[i](state))?result.push(state.result):cc(false)],state.accept(state.i,result)]],where[result=[]]]])}).tconfiguration(\'std seq\',\'parser.alt\',function (){this.configure(\'parser.core\').parser.defparser(\'alt\',fn_[l[as=seq[~arguments]] in fn[state][seq[as|[_(state)]]]])}).tconfiguration(\'std opt seq continuation\',\'parser.times\',function (){this.configure(\'parser.core\').parser.defparser(\'times\',fn[p,lower,upper][fn[state][call/cc[fn[cc][opt.unroll[i,lower][++count,(state=p(state))?result.push(state.result):cc(false)],true]]&&call/cc[l*[loop(cc)=(!upper||count++<upper)&&state.has_input()&&p(state)/se[state=_,when[_]]?result.push(state.result)&&call/tail[loop(cc)]:cc(state.accept(state.i,result))] in loop],where[count=0,result=[]]]])}).tconfiguration(\'std seq continuation\',\'parser.opt\',function (){this.configure(\'parser.core\').parser.defparser(\'opt\',fn[p][fn[state][state.accept(n,r),where*[s=p(state),n=s?s.i:state.i,r=s&&s.result]]])}).tconfiguration(\'std seq continuation\',\'parser.match\',function (){this.configure(\'parser.core\').parser/se[_.defparser(\'match\',fn[p][fn[state][p(state)/re[_&&state.accept(state.i,state.result)]]]),_.defparser(\'reject\',fn[p][fn[state][p(state)/re[!_&&state.accept(state.i,null)]]])]}).tconfiguration(\'std seq continuation\',\'parser.bind\',function (){this.configure(\'parser.core\').parser/se[_.defparser(\'bind\',fn[p,f][fn[state][p(state)/re[_&&_.accept(_.i,f.call(_,_.result))]]])]}).tconfiguration(\'std seq continuation\',\'parser.dsl\',function (){this.configure(\'parser.core\').rmacro(qs[peg[_]],fn[x][qs[qg[l*[_bindings][_parser]]].replace({_bindings:new this.syntax(\',\',seq[sp[this.parser.parsers]*[qs[_x=_y].replace({_x:_[0],_y:new outer.ref(_[1])})]]),_parser:this.parser.dsl.macroexpand(x)}),where[outer=this]]),this.parser.dsl=caterwaul.global().clone()/se.dsl[dsl.macro/se[_(qs[_(_)],fn[x,y][qs[_x(_y)].replace({_x:e(x),_y:y})]),_(qs[_/_],fb(\'/\',\'alt\')),_(qs[_%_],fb(\'%\',\'seq\')),_(qs[_>>_],b(\'bind\')),_(qs[[_]],u(\'opt\')),_(qs[_].as(\'(\'),fn[x][e(x).as(\'(\')]),_(qs[_[_]],fn[x,l][qs[times(_x,_l)].replace({_x:e(x),_l:l})]),_(qs[_[_,_]],fn[x,l,u][qs[times(_x,_l,_u)].replace({_x:e(x),_l:l,_u:u})]),where*[e=dsl.macroexpand,fb(op,name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:x.flatten(op).map(e)/se[_.data=\',\'],_y:e(y)}),b(name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:e(x),_y:y}),u(name)(x)=qs[_name(_x)].replace({_name:name,_x:e(x)})]]]}).configuration(\'parser\',function (){this.configure(\'parser.core parser.c parser.seq parser.alt parser.times parser.opt parser.match parser.bind parser.dsl\')});');
meta::configuration('dependencies', <<'__8548df37a8c03740da742d1f650b6dd7');
# Named dependencies:
caterwaul.all.js: http://spencertipping.com/caterwaul/caterwaul.all.min.js
__8548df37a8c03740da742d1f650b6dd7
meta::data('current-continuation', 'figure out introspection modeling');
meta::data('default-action', 'shell');
meta::data('libraries', <<'__cca38bdfe6664615b581ec6dff43cf46');
# URLs of libraries to be downloaded into the lib/ directory.
http://spencertipping.com/caterwaul/caterwaul.all.js
http://spencertipping.com/montenegro/montenegro.server.js
__cca38bdfe6664615b581ec6dff43cf46
meta::data('license', <<'__3c6177256de0fddb721f534c3ad8c0ee');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__3c6177256de0fddb721f534c3ad8c0ee
meta::data('main', 'server.js');
meta::data('watching', '1');
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__5c64e1adc128113e1b409e0fbcbe29a2');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', join(' ', @_)) : retrieve('data::current-continuation');
__5c64e1adc128113e1b409e0fbcbe29a2
meta::function('child', <<'__9b5175a0e9b94998754cad35582b987a');
my ($child_name) = @_;
clone($child_name);
enable();
qx($child_name update-from $0 -nu);
disable();
__9b5175a0e9b94998754cad35582b987a
meta::function('clone', <<'__5a30a4ba6293e250ed22884d609e4781');
for (grep length, @_) {
  file::write($_, serialize(), noclobber => 1);
  chmod(0700, $_);
}
__5a30a4ba6293e250ed22884d609e4781
meta::function('cp', <<'__e5fee448a74ecbf4ae215e6b43dfc048');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__e5fee448a74ecbf4ae215e6b43dfc048
meta::function('create', <<'__7ca9912feb8e43dc446bab9a0c79821a');
my ($name, $value) = @_;
return edit($name) if exists $data{$name};
associate($name, defined $value ? $value : '');
edit($name) unless defined $value;
__7ca9912feb8e43dc446bab9a0c79821a
meta::function('current-state', <<'__d83ae43551c0f58d1d0ce576402a315a');
my @valid_keys   = grep ! /^state::/, sort keys %data;
my @ordered_keys = (grep(/^meta::/, @valid_keys), grep(! /^meta::/, @valid_keys));
join "\n", map serialize_single($_), @ordered_keys;
__d83ae43551c0f58d1d0ce576402a315a
meta::function('disable', 'chmod_self(sub {$_[0] & 0666});');
meta::function('dupdate', <<'__9eb9747ca6d4cdcb7d863ca9ed13f80a');
# Update the repository based on the dependencies it lists.
use LWP::Simple ();
rm($_) for grep /^cached_dependency::/, keys %data;
my %dependencies = dependencies();
associate("cached_dependency::$_", LWP::Simple::get($dependencies{$_})) for keys %dependencies;
__9eb9747ca6d4cdcb7d863ca9ed13f80a
meta::function('e', 'edit(\'sdoc::js::figment\')');
meta::function('edit', <<'__c74a5d1c0dbd922acaf1397f89190fce');
my ($name, %options) = @_;
my $extension = extension_for($name);

die "Attribute $name does not exist." unless exists $data{$name};
associate($name, invoke_editor_on($data{$name} || "# Attribute $name", %options, attribute => $name, extension => $extension),
          execute => $name !~ /^bootstrap::/);
save();
'';
__c74a5d1c0dbd922acaf1397f89190fce
meta::function('enable', 'chmod_self(sub {$_[0] | $_[0] >> 2});');
meta::function('export', <<'__388e0cc60507443cb1c0cc3e2658cfef');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__388e0cc60507443cb1c0cc3e2658cfef
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('grep', <<'__ba0d15b75bfe3555d76b894c93d465b7');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my $pattern              = shift @_ or die 'Must specify a pattern to search for';
my ($options, @criteria) = separate_options(@_);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

my @m_attributes, @m_line_numbers, @m_lines;

for my $k (@attributes) {
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ /$pattern/;

    $lines[$_] =~ s/($pattern)/\033[1;31m\1\033[0;0m/g if $$options{'-c'};

    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        $lines[$_]}} 

if ($$options{'-c'}) {
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__ba0d15b75bfe3555d76b894c93d465b7
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__edb47026faf087bf9f5edca08407e0e2');
# Takes one or more hook files and executes them if they exist and are executable.
sh(@_) if -x $_[0];
__edb47026faf087bf9f5edca08407e0e2
meta::function('import', <<'__ac86cbe9c9fb12fc8cef2cc88e80c01e');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__ac86cbe9c9fb12fc8cef2cc88e80c01e
meta::function('import-bundle', <<'__4c7139ed5c9f65f38a33cf8f8a6cae27');
eval join '', <STDIN>;
die $@ if $@;
__4c7139ed5c9f65f38a33cf8f8a6cae27
meta::function('initial-state', '$transient{initial};');
meta::function('lib', <<'__1fdcdc3310118791c100b533f6c11070');
# Regenerates lib/ directory
hook('bin/before-lib');
hook('bin/before-lib-clean');
rm($_) for grep /^js::dependency::/, keys %data;
hook('bin/after-lib-clean');

hook('bin/before-lib-download');
qx|cd lib && wget -nv $_| for split /\n+/, libraries();
hook('bin/after-lib-download');
hook('bin/after-lib');
__1fdcdc3310118791c100b533f6c11070
meta::function('load-state', <<'__0bddb2edf7d13e60bf47e7bce8c8c011');
my ($state_name) = @_;
my $state = retrieve("state::$state_name");

terminal::state('saving current state into _...');
&{'save-state'}('_');

delete $data{$_} for grep ! /^state::/, keys %data;
%externalized_functions = ();

terminal::state("restoring state $state_name...");
meta::eval_in($state, "state::$state_name");
terminal::error($@) if $@;
reload();
verify();
__0bddb2edf7d13e60bf47e7bce8c8c011
meta::function('loc', <<'__dfe41cc08b7be0baa9a396df86e9b8e2');
# Counts SLOC, whitespace, and total LOC in the codebase.
my @lines      = map split(/\n/, file::read($_)), dependencies(), main();
my $comments   = grep /^\s*\/\//, @lines;
my $whitespace = grep /^\s*$/, @lines;
my $source     = @lines - $comments - $whitespace;

print "(Figures below include library code)\n";
print "$source SLOC, $whitespace whitespace lines, $comments comment lines\n";
__dfe41cc08b7be0baa9a396df86e9b8e2
meta::function('lock', 'chmod_self(sub {$_[0] & 0555});');
meta::function('ls', <<'__acdc3ca5777ab9c7c430d493a7555998');
my ($options, @criteria) = separate_options(@_);
my ($all, $shadows, $dereference, $sizes, $flags) = @$options{qw(-a -s -d -z -l)};
$all   ||= $dereference;
$sizes ||= $flags;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$all ? \@definitions : \@internals} if $sizes;

my %flag_hashes = map {$_ => {map {$_ => 1} select_keys("-$_" => 1)}} qw(m u i) if $flags;
my @flags       = map {my $k = $_; join '', map($flag_hashes{$_}{$k} ? $_ : '-', sort keys %flag_hashes)} @definitions if $flags;

join "\n", map strip($_), split /\n/, table_display($all ? [@definitions] : [grep length, @externals], $dereference ? ([@externals]) : (),
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : ());
__acdc3ca5777ab9c7c430d493a7555998
meta::function('ls-a', 'ls(\'-ad\', @_);');
meta::function('lss', '# Attribute function::lss');
meta::function('mv', <<'__52e95180e3c7019116bd798e0da0fdda');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from));
rm($from);
__52e95180e3c7019116bd798e0da0fdda
meta::function('name', <<'__6848cbc257e4b6d7441b25acb04e23c9');
my $name = $0;
$name =~ s/^.*\///;
$name;
__6848cbc257e4b6d7441b25acb04e23c9
meta::function('node', <<'__0dbdfd4cc670051c20430f7ff167ccab');
# Runs node on a collection of source files and arguments. The format is:
# node([@source_strings], @process_args);
my ($sources, @args) = @_;

with_exported(@$sources, sub {
  hook('bin/before-node', $_[0], @args);
  sh('node', $_[0], @args);
  hook('bin/after-node', $_[0], @args);
});
__0dbdfd4cc670051c20430f7ff167ccab
meta::function('note', <<'__bcbfeac6dd2112f47296265444570a6e');
# Creates a note with a given name, useful for jotting things down.
create("note::$_[0]");
__bcbfeac6dd2112f47296265444570a6e
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('parse', <<'__badaf7185f217947bd8b553c313561a9');
with_exported(@_, sub {
  node([qw/cached_dependency::caterwaul.all.js js::jsparse js::figment-parser js::with-files js::parse-json/], $_[0]);
});
__badaf7185f217947bd8b553c313561a9
meta::function('perl', <<'__986a274c013b77fe08d29726ce3799fe');
my $result = eval(join ' ', @_);
$@ ? terminal::error($@) : $result;
__986a274c013b77fe08d29726ce3799fe
meta::function('preprocess', <<'__66e539d29e9afa903569efad0eb7c886');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__66e539d29e9afa903569efad0eb7c886
meta::function('reload', 'execute($_) for grep ! /^bootstrap::/, keys %data;');
meta::function('render', 'file::write(attribute($_) . \'.js\', retrieve($_), mkpath => 1) for grep s/^sdoc::js::/js::/ || /^js::/, keys %data;');
meta::function('repl', <<'__31ce26877d3622ecdda1025b308ae6aa');
# Runs a REPL of your source, minus the webserver.
render();
hook('bin/before-repl');

my $repl_base = retrieve('data::repl-base') or die 'You need to define data::main-base to be a newline-separated list of files to load for the REPL.';

my ($file, $name) = ('/tmp/' . state() . '-repl.js', name());
file::write($file, -f 'repl.js' ? 'repl.js' : "id::require('repl').start('$name> ')");
node([split(/ /, $repl_base), $file]);

hook('bin/after-repl');
__31ce26877d3622ecdda1025b308ae6aa
meta::function('rm', <<'__26d4a78ddb47259b3d8dcabe390426bd');
exists $data{$_} or terminal::warning("$_ does not exist") for @_;
delete @data{@_};
__26d4a78ddb47259b3d8dcabe390426bd
meta::function('run-forever', <<'__76175932a2d2692fc802856c28d0848d');
# Runs your application indefinitely, restarting each time it fails.
# There's a one-second delay between restarts to prevent a tight loop.
# Takes one argument, which is the function to run forever.
my ($f, @args) = @_;
hook('bin/before-run-forever');
&$f(@args) while sleep 0.1 && ! -f 'stop';
hook('bin/after-run-forever');
__76175932a2d2692fc802856c28d0848d
meta::function('save', 'dangerous(\'\', sub {file::write($0, serialize()); $transient{initial} = state()}) if verify();');
meta::function('save-state', <<'__5c5b586331e25951140ced6442d9fe2b');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
associate("state::$state_name", &{'current-state'}(), execute => 1);
__5c5b586331e25951140ced6442d9fe2b
meta::function('sdoc', <<'__060cfa349e629eb90a82b87a8ba00c1d');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    ;   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_$e", split /\n/, $text)}

sub paragraphs {map split(/(\n{2,})/, $_), @_}

my ($filename) = @_;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my ($extension)       = $filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo;
my ($other_extension) = extension_for(attribute($filename));
$other_extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc($other_extension || $extension)};

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n$start $generated_string $end\n";
__060cfa349e629eb90a82b87a8ba00c1d
meta::function('sdocp', <<'__8b7ed5bbd537234ae53c0691b6d02c97');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__8b7ed5bbd537234ae53c0691b6d02c97
meta::function('serialize', <<'__5148e8ca46eeb3e297f76d098e496bcf');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [retrieve('bootstrap::initialization'), @attributes, 'internal::main();', '', '__END__']};
join "\n", @final_array;
__5148e8ca46eeb3e297f76d098e496bcf
meta::function('serialize_single', <<'__ef0f63556d22816ed102d3bbe2172b28');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
return "$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";
__ef0f63556d22816ed102d3bbe2172b28
meta::function('sh', 'system(@_);');
meta::function('shell', <<'__d7af156228ebbf921ab2ae7f5432c4b8');
use Term::ReadLine;

my $term = new Term::ReadLine "$0 shell";
$term->ornaments(0);
my $attribs = $term->Attribs;
my $name = name();
$attribs->{completion_entry_function} = $attribs->{list_completion_function};

my $prompt = sub {
  my $state  = state();
  my $other  = $state ne $transient{initial} ? 33 : 30;
  my $locked = is_locked() ? "\033[1;31mlocked\033[0;0m" : '';
  "\033[1;32m$name\033[1;${other}m" . substr($state, 0, 4) . "\033[0;0m$locked "};

while ($attribs->{completion_word} = [sort keys %data, sort keys %externalized_functions], defined($_ = $term->readline(&$prompt()))) {
  my $command_line = $_;
  my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
  my $function_name = shift(@args) or next;

  terminal::warning("$function_name invalid (use 'ls' to see available commands)"), next unless $externalized_functions{$function_name};

  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  print dangerous('', sub {&$function_name(@args)}), "\n"}
__d7af156228ebbf921ab2ae7f5432c4b8
meta::function('size', 'length(serialize());');
meta::function('snapshot', <<'__c5d8a624c3eecc183f39b33c9b72f0db');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
$finalname;
__c5d8a624c3eecc183f39b33c9b72f0db
meta::function('state', <<'__119111f84c3e32a5536838ac84bc6f10');
my @keys = sort keys %data;
my $hash = fast_hash(fast_hash(scalar @keys) . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
$hash;
__119111f84c3e32a5536838ac84bc6f10
meta::function('t', <<'__25c1d93bc6ad99f47f1918885c31a24d');
my @attributes = select_keys('--criteria' => "sdoc::js::.*test/.*$_[0]");
edit($attributes[0]);
__25c1d93bc6ad99f47f1918885c31a24d
meta::function('test', 'node([\'cached_dependency::caterwaul.all.js\', \'js::figment\', grep s/sdoc:://, select_keys(\'--criteria\' => \'sdoc::js::.*test/.*\')], @_);');
meta::function('test-parse', 'node([qw/cached_dependency::caterwaul.all.js js::jsparse js::figment-parser js::figment-parser-tests/]);');
meta::function('testl', 'node([\'/home/spencertipping/conjectures/caterwaul/caterwaul.all.js\', \'js::figment\', grep s/sdoc:://, select_keys(\'--criteria\' => \'sdoc::js::.*test/.*\')], @_);');
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'chmod_self(sub {$_[0] | 0200});');
meta::function('update', '&{\'update-from\'}(@_, grep s/^parent:://o, sort keys %data);');
meta::function('update-from', <<'__4bb87dcea3d13203b15070a4a44389f8');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

my ($options, @targets) = separate_options(@_);

@targets or return;
my $save_state = ! ($$options{'-n'} || $$options{'--no-save'});
my $no_parents =    $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
my $force      =    $$options{'-f'} || $$options{'--force'};

&{'save-state'}('before-update') if $save_state;

for my $target (@targets) {
  dangerous("updating from $target", sub {
    my $attributes = join '', qx($target ls -aiu);
    die "skipping unreachable $target" unless $attributes;

    rm(split /\n/, retrieve("parent::$target")) if $data{"parent::$target"};
    associate("parent::$target", $attributes) unless $no_parents;

    dangerous('', sub {eval qx($target serialize -ipmu)});
    dangerous('', sub {eval qx($target serialize -ipMu)});
    reload()})}

if (verify()) {terminal::info("Successfully updated from $_[0]. Run 'load-state before-update' to undo this change.") if $save_state}
elsif ($force) {terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                  'Run "load-state before-update" to undo the update and return to a working state.') if $save_state}
else {terminal::error('Verification failed after the upgrade was complete.');
      terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.") if $save_state;
      return &{'load-state'}('before-update') if $save_state}
__4bb87dcea3d13203b15070a4a44389f8
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__123f83b5cb5c2400ae0b5c8af1c7bf20');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
$result;
__123f83b5cb5c2400ae0b5c8af1c7bf20
meta::function('vim', <<'__bd231af998c353790253bc6660be0b90');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__bd231af998c353790253bc6660be0b90
meta::internal_function('associate', <<'__fc4f785bcf3ffe3225a73a1fdd314703');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{'execute'};
$value;
__fc4f785bcf3ffe3225a73a1fdd314703
meta::internal_function('attribute', <<'__62efb9f22157835940af1d5feae98d98');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__62efb9f22157835940af1d5feae98d98
meta::internal_function('chmod_self', <<'__b13487447c65f2dc790bd6b21dde89dd');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__b13487447c65f2dc790bd6b21dde89dd
meta::internal_function('complete', <<'__f14ae2337c0653b6bb6fd02bb6493646');
my @functions  = sort keys %externalized_functions;
my @attributes = sort keys %data;

sub match {
  my ($text, @options) = @_;
  my @matches = sort grep /^$text/, @options;

  if    (@matches == 0) {return undef;}
  elsif (@matches == 1) {return $matches [0];}
  elsif (@matches >  1) {return ((longest ($matches [0], $matches [@matches - 1])), @matches);}
}

sub longest {
  my ($s1, $s2) = @_; 
  return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
  return ''; 
}

# This is another way to implement autocompletion.
#
# my $attribs = $term->Attribs;
# $attribs->{completion_entry_function} = $attribs->{list_completion_function};
# $attribs->{completion_word} = [sort keys %data, sort keys %externalized_functions];

my ($text, $line) = @_;
if ($line =~ / /) {
  # Start matching attribute names.
  match ($text, @attributes);
} else {
  # Start of line, so it's a function.
  match ($text, @functions);
}
__f14ae2337c0653b6bb6fd02bb6493646
meta::internal_function('dangerous', <<'__167c759b4f9e54a667222dd3d405200d');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my $result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
$result;
__167c759b4f9e54a667222dd3d405200d
meta::internal_function('debug_trace', <<'__77644ab45a770a6e172680f659911507');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__77644ab45a770a6e172680f659911507
meta::internal_function('dep', <<'__bad9b934374b176318ed2295b63130bc');
# A variadic function to prepend cached_dependency:: onto things.
# Used like this: dep(qw/caterwaul.all.js montenegro.server.js/)
map "cached_dependency::$_", @_;
__bad9b934374b176318ed2295b63130bc
meta::internal_function('execute', <<'__4b4efc33bc6767a7aade7f427eedf83f');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{"meta::$namespace"}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};
__4b4efc33bc6767a7aade7f427eedf83f
meta::internal_function('exported', <<'__27414e8f2ceeaef3555b9726e690eb0f');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;
__27414e8f2ceeaef3555b9726e690eb0f
meta::internal_function('extension_for', <<'__65e48f50f20bc04aa561720b03bf494c');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__65e48f50f20bc04aa561720b03bf494c
meta::internal_function('fast_hash', <<'__ac70f469e697725cfb87629833434ab1');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__ac70f469e697725cfb87629833434ab1
meta::internal_function('file::read', <<'__186bbcef8f6f0dd8b72ba0fdeb1de040');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__186bbcef8f6f0dd8b72ba0fdeb1de040
meta::internal_function('file::write', <<'__eb7b1efebe0db73378b0cce46681788d');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

open my($handle), $options{append} ? '>>' : '>', $name or die "Can't open $name for writing";
print $handle $contents;
close $handle;
__eb7b1efebe0db73378b0cce46681788d
meta::internal_function('fnv_hash', <<'__8d001a3a7988631bab21a41cee559758');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__8d001a3a7988631bab21a41cee559758
meta::internal_function('hypothetically', <<'__33ee2e1595d3877bd1d9accaa72305c8');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__33ee2e1595d3877bd1d9accaa72305c8
meta::internal_function('internal::main', <<'__b7379923a1c7d2481bad4247b8a71974');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action || 'usage';
terminal::warning("unknown action: '$function_name'") and $function_name = 'usage' unless $externalized_functions{$function_name};

chomp(my $result = &$function_name(@ARGV));
print "$result\n" if $result;

save() unless state() eq $transient{initial};

END {
  enable();
}
__b7379923a1c7d2481bad4247b8a71974
meta::internal_function('invoke_editor_on', <<'__1448132d5294a4b8390b4a684d8a78f9');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__1448132d5294a4b8390b4a684d8a78f9
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__93213d60cafb9627e0736b48cd1f0760');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__93213d60cafb9627e0736b48cd1f0760
meta::internal_function('retrieve', <<'__0b6f4342009684fdfa259f45ac75ae37');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];
__0b6f4342009684fdfa259f45ac75ae37
meta::internal_function('retrieve_with_hooks', <<'__5186a0343624789d08d1cc2084550f3d');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__5186a0343624789d08d1cc2084550f3d
meta::internal_function('select_keys', <<'__8ee1d5fa37927c66d9eec4d0d8269493');
my %options   = @_;
my %inherited = map {$_ => 1} split /\n/o, join "\n", retrieve(grep /^parent::/o, sort keys %data) if $options{'-u'} or $options{'-U'};
my $criteria  = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

grep /$criteria/ && (! $options{'-u'} || ! $inherited{$_}) && (! $options{'-U'} || $inherited{$_}) &&
                    (! $options{'-I'} || ! $transient{inherit}{namespace($_)}) && (! $options{'-i'} || $transient{inherit}{namespace($_)}) &&
                    (! $options{'-S'} || ! /^state::/o) && (! $options{'-M'} || ! /^meta::/o) && (! $options{'-m'} || /^meta::/o), sort keys %data;
__8ee1d5fa37927c66d9eec4d0d8269493
meta::internal_function('separate_options', <<'__d47e8ee23fe55e27bb523c9fcb2f5ca1');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
  $options{$1} = $2 for grep /^([^=]+)=(.*)$/, @longs;
++$options{$_}      for grep ! /=/, @singles, @longs;

({%options}, @others, @_);
__d47e8ee23fe55e27bb523c9fcb2f5ca1
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__8a6897e093f36bf05477a3889b84a61d');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__8a6897e093f36bf05477a3889b84a61d
meta::internal_function('temporary_name', <<'__0fb1402061581b69822f913631b4a9d9');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__0fb1402061581b69822f913631b4a9d9
meta::internal_function('translate_backtrace', <<'__06fad3d85833a6484e426401b95e0206');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__06fad3d85833a6484e426401b95e0206
meta::internal_function('with_exported', <<'__fc4f32c46d95c6deed0414364d1c7410');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__fc4f32c46d95c6deed0414364d1c7410
meta::library('terminal', <<'__0ec2ca45ce7b9b56c05c9b284a7ee78a');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp $_, print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__0ec2ca45ce7b9b56c05c9b284a7ee78a
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::message_color('test', 'purple');
meta::message_color('watch', 'blue');
meta::note('parse-specs', <<'__0252e9ccc128d793d2b6566a30203cb8');
Parsing specs.
Parsing works in a fairly straightforward way, but it does have some quirks. Among them are:

| 1. All binary operators associate right by default. This may or may not be desirable.
  2. Precedence is unencoded in the parse tree, but instantiation-specific spacing is encoded. For example, 3+4 * 5 results in the + binding before *, defying both intuition and
     right-associativity.
  3. Paragraphs are assumed to be side-effectful and self-contained. However, paragraph breaks don't happen inside expressions; for example, opening a paren and then creating a paragraph break
     has no effect because the paren group is the active parse state. (This can be undesirable; it requires the host semantics to allow file-specific context.)
__0252e9ccc128d793d2b6566a30203cb8
meta::note('q', <<'__1506e7ce47f07f339e9869afbd9c7162');
Figment programming language.
This language is designed to address the shortcomings in various other projects including Caterwaul and Divergence. It has no defined semantics; all it provides is a lex and parse algorithm to
convert text into syntax trees.

Todo.

| 1. Write a figment -> JSON parser. [done]
  2. Create some skeletal semantics and write a JSON -> JSON interpreter (the goal being to macroexpand code). [in progress]
  3. Write a figment-JSON -> Javascript converter (with some sane semantics).

Thoughts about aesthetics.
Aesthetics shouldn't be written off completely. It's important to not only allow but encourage repetition at some points. For example:

| #foo {...}
  #foo .bar {...}
  #foo .bar.bif {...}
  #foo .bif {...}
  #foo .bif.baz {...}

This kind of repetition visually reinforces what's going on. Depending on the application it may be appropriate (though the user should always have a way to eliminate it).
__1506e7ce47f07f339e9869afbd9c7162
meta::parent('./sdoc', <<'__2d47795f5a2f946e1655dcc68b32aadd');
function::lss
function::sdoc
function::sdocp
meta::type::sdoc
parent::/home/spencertipping/bin/object
retriever::sdoc
retriever::sdocp
__2d47795f5a2f946e1655dcc68b32aadd
meta::parent('/home/spencertipping/bin/configuration', <<'__511208c99d8bc2caa3067db9f1824163');
meta::type::configuration
parent::/home/spencertipping/bin/object
__511208c99d8bc2caa3067db9f1824163
meta::parent('/home/spencertipping/bin/node-base', <<'__401dd64e9d57266c5a33895c0f214301');
function::hook
function::lib
function::loc
function::node
function::render
function::repl
function::run-forever
internal_function::dep
message_color::test
meta::type::js
parent::/home/spencertipping/bin/repository
parent::/home/spencertipping/conjectures/perl-objects/sdoc
__401dd64e9d57266c5a33895c0f214301
meta::parent('/home/spencertipping/bin/object', <<'__24f211bef7e65af28726dfe6075c671f');
bootstrap::initialization
bootstrap::perldoc
function::cat
function::cc
function::child
function::clone
function::cp
function::create
function::current-state
function::disable
function::edit
function::enable
function::export
function::extern
function::grep
function::hash
function::import
function::initial-state
function::load-state
function::lock
function::ls
function::ls-a
function::mv
function::name
function::parents
function::perl
function::reload
function::rm
function::save
function::save-state
function::serialize
function::serialize_single
function::sh
function::shell
function::size
function::snapshot
function::state
function::touch
function::unlock
function::update
function::update-from
function::usage
function::verify
internal_function::associate
internal_function::attribute
internal_function::chmod_self
internal_function::dangerous
internal_function::debug_trace
internal_function::execute
internal_function::exported
internal_function::extension_for
internal_function::fast_hash
internal_function::file::read
internal_function::file::write
internal_function::fnv_hash
internal_function::hypothetically
internal_function::internal::main
internal_function::invoke_editor_on
internal_function::is_locked
internal_function::namespace
internal_function::retrieve
internal_function::retrieve_with_hooks
internal_function::select_keys
internal_function::separate_options
internal_function::strip
internal_function::table_display
internal_function::temporary_name
internal_function::translate_backtrace
internal_function::with_exported
library::terminal
message_color::state
message_color::states
meta::configure
meta::externalize
meta::functor::editable
meta::type::bootstrap
meta::type::data
meta::type::function
meta::type::inc
meta::type::internal_function
meta::type::library
meta::type::message_color
meta::type::meta
meta::type::parent
meta::type::retriever
meta::type::state
retriever::file
retriever::id
__24f211bef7e65af28726dfe6075c671f
meta::parent('/home/spencertipping/bin/repository', <<'__088dab82112d5c0a3ef67a44662052b3');
function::dupdate
function::import-bundle
internal_function::complete
message_color::watch
meta::type::cached_dependency
meta::type::watch
parent::/home/spencertipping/bin/configuration
__088dab82112d5c0a3ef67a44662052b3
meta::parent('/home/spencertipping/conjectures/perl-objects/sdoc', <<'__2d47795f5a2f946e1655dcc68b32aadd');
function::lss
function::sdoc
function::sdocp
meta::type::sdoc
parent::/home/spencertipping/bin/object
retriever::sdoc
retriever::sdocp
__2d47795f5a2f946e1655dcc68b32aadd
meta::parent('configuration', <<'__511208c99d8bc2caa3067db9f1824163');
meta::type::configuration
parent::/home/spencertipping/bin/object
__511208c99d8bc2caa3067db9f1824163
meta::parent('development', <<'__96e7494250faedeba358d4a378450014');
parent::./sdoc
parent::configuration
parent::notes
parent::preprocessor
parent::vim-highlighters
__96e7494250faedeba358d4a378450014
meta::parent('notes', <<'__320d51928ec8e2e370d67d30abe059b5');
function::note
meta::type::note
parent::object
__320d51928ec8e2e370d67d30abe059b5
meta::parent('object', <<'__24f211bef7e65af28726dfe6075c671f');
bootstrap::initialization
bootstrap::perldoc
function::cat
function::cc
function::child
function::clone
function::cp
function::create
function::current-state
function::disable
function::edit
function::enable
function::export
function::extern
function::grep
function::hash
function::import
function::initial-state
function::load-state
function::lock
function::ls
function::ls-a
function::mv
function::name
function::parents
function::perl
function::reload
function::rm
function::save
function::save-state
function::serialize
function::serialize_single
function::sh
function::shell
function::size
function::snapshot
function::state
function::touch
function::unlock
function::update
function::update-from
function::usage
function::verify
internal_function::associate
internal_function::attribute
internal_function::chmod_self
internal_function::dangerous
internal_function::debug_trace
internal_function::execute
internal_function::exported
internal_function::extension_for
internal_function::fast_hash
internal_function::file::read
internal_function::file::write
internal_function::fnv_hash
internal_function::hypothetically
internal_function::internal::main
internal_function::invoke_editor_on
internal_function::is_locked
internal_function::namespace
internal_function::retrieve
internal_function::retrieve_with_hooks
internal_function::select_keys
internal_function::separate_options
internal_function::strip
internal_function::table_display
internal_function::temporary_name
internal_function::translate_backtrace
internal_function::with_exported
library::terminal
message_color::state
message_color::states
meta::configure
meta::externalize
meta::functor::editable
meta::type::bootstrap
meta::type::data
meta::type::function
meta::type::inc
meta::type::internal_function
meta::type::library
meta::type::message_color
meta::type::meta
meta::type::parent
meta::type::retriever
meta::type::state
retriever::file
retriever::id
__24f211bef7e65af28726dfe6075c671f
meta::parent('preprocessor', <<'__9c447d98a6cfad0ea5444db7eb4b75de');
function::preprocess
meta::type::template
parent::object
template::comment
template::eval
template::failing_conditional
template::include
__9c447d98a6cfad0ea5444db7eb4b75de
meta::parent('vim-highlighters', <<'__1258d5867978f2068c8efd130c2066f7');
function::vim
meta::type::vim_highlighter
parent::object
__1258d5867978f2068c8efd130c2066f7
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('sdoc', 'exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]") : undef;');
meta::retriever('sdocp', <<'__fef74cd94fa8761618662802f0bfc171');
my $attribute = attribute($_[0]);
exists $data{"sdoc::$attribute"} ? sdocp("sdoc::$attribute") : undef;
__fef74cd94fa8761618662802f0bfc171
meta::sdoc('js::figment', <<'__e6479094702b4bb87b20286c17973a23');
Figment parser | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Figment is a language motivated by the core ideas behind Caterwaul. Caterwaul is in general an enormous step forward from plain Javascript (from my perspective anyway), enabling a whole new
level of expressiveness. However, Javascript is sometimes hard to work with -- the lvalue restriction is particularly difficult, as is the limited selection of operators. For this reason I've
decided to break out of Javascript's syntax and use Caterwaul's loose syntax trees for a more extensible and expressive language.

Basic elements.
Figment sees the world similarly to Caterwaul; that is, expressions are joined by infix and prefix operators, or by an implicit join action. (Analogous to 'i;' from a parsing perspective,
though the meaning is different.) Unlike Caterwaul, syntax trees don't encode preassigned operator precedence or syntactic constructs; it's just a big tree of operators and expressions. The
grammar rules are basically these (where \w is [A-Za-z0-9_] -- so it's totally fine to begin an identifier with a digit):

| operator ::= '=' ident | /[-+\/*&^%$#@!`~:\\|=?<>.;]+/
  ident    ::= /\w+['?!]*/
  atom     ::= '_' operator | /\d+/ | /\d*\.\d+([eE][-+]?\d+)?/ | /(['"])([^\1]|\\.)*\1/ | ident
  parens   ::= '(' expression ')'
  brackets ::= '[' expression ']'
  braces   ::= '{' expression '}'

Ambiguities in this grammar are resolved in the PEG way -- that is, by taking the first matching alternative and not backtracking.

Expressions and operator precedence.
Operators themselves don't have precedence, but the way they're typed implies things about the bind order. There are also the issues of joins and prefix operators, which when combined probably
make the grammar a bit ambiguous. In a nutshell, here are the rules:

| 1. Two expressions directly adjacent to each other (no whitespace) bind with highest precedence. The operator that binds them is a 'join', which basically means juxtaposition.
  2. One expression prefixed by an operator with no whitespace binds next. This is interpreted as a prefix operator, but only if the spacing is asymmetric: a +b treats + as prefix, whereas a+b
     treats the + as binary.
  3. Two expressions separated by a binary operator with no whitespace binds next. Whitespace on the right-side of the operator is ignored; this lets you insert linewraps around tight
     bindings. So, for example, a+b and a+ b mean the same thing.
  4. Two expressions separated by whitespace binds next. This creates a join.
  5. One expression prefixed by an operator with whitespace binds next. It happens only at the beginning of groups or after another operator: a + + b and (+ a), for example.
  6. A binary operator with whitespace around it binds next: a + b. It doesn't matter how much whitespace is there, or whether it's symmetric. It just needs to be on both sides.
  7. Finally, a comma binds last. It's used to separate expressions, and has the lowest precedence regardless of surrounding whitespace.

Somewhat counterintuitively, everything right-associates. This is in part due to my own laziness, and in part due to the fact that having things left-associate would be somewhat arbitrary.
But, for example, a + b + c is consed into (+ a (+ b c)), not (+ (+ a b) c).

Linguistically the matter is one of preferring either point-free or point-ful. Because most sentences are phrased in SVO order, left-associativity focuses on building up the SV pair with
postfix modifiers (e.g. 'runs quickly', or 'runs(quickly)(somewhere), which is more like function currying); whereas right-associativity would focus on building the object, modifying it in
reverse (like function application; e.g. 'quickly runs', which renders as 'quickly(runs(somewhere))').

Toplevel syntax.
At the toplevel the document is split into paragraphs. SDoc-style paragraph classification is used: paragraphs that begin with [A-Z|] are considered comments, while others are interpreted as
text. Figment also supports a lightweight line comment syntax: /[-\/]\s*[A-Z]/ begins a line comment. That is, a slash / or a hyphen - followed by a capital letter (there can be whitespace).
For example:

| some(code),   / This is a comment
  more(code)    - This is also a comment

Some people will complain about the fact that comments have to start with a capital letter. (Intentionally left ambiguous.)

The parser below uses a forward-definition technique I learned from reading Chris Double's JSParse code (very clever). By setting f(x) to f(x) in an eta-expanded context, we then update the
value of f to have the original definition automatically forward to the new one (which works because of lazy scoping).

  caterwaul.tconfiguration('std seq continuation parser', 'figment', function () {
    this.figment = this.global().clone().field('decompile', parse).field('parse', parse).field('lex', lex),
    where*[parse(s)      = expression(lex(s)),

           lex           = l*[literate     = peg[c(/[A-Z\|](?:[^\n]+\n?)*/, 1) >> fn_['']],
                              paragraph    = peg[c(/(?:[^\n]+\n?)*/, 1) >> fn[xs][xs[0]]],
                              paragraphs   = peg[(([c(/\n\n+/, 2)] >> fn_['']) % (literate / paragraph) >> fn[xs][xs.join('')])[0] >> fn[xs][xs.join('')]],
                              line_comment = peg[c(/[-\/]\s*/, 1) % c(/[A-Z][^\n]*/, 1) % c('\n') >> fn_['']],
                              code         = peg[(line_comment / c(['-', '/']) / (c(/[^-\/]+/, 1) >> fn[xs][xs[0]]))[1] >> fn[xs][xs.join('')]]] in
                           fn[s][code(paragraphs(s))],

           // Forward definition of expression
           expression(x) = expression(x),
           identifier    = peg[c(/[A-Za-z0-9_]+['?!]*/, 1) >> fn[xs][xs[0]]],
           operator      = l*[coerced_identifier = peg[c('=') % identifier                  >> fn[xs][xs.join('')]],
                              regular_operator   = peg[c(/[-+\/*&^%$#@!`~:\\|=?<>\.;]+/, 1) >> fn[xs][xs[0]]]] in peg[coerced_identifier / regular_operator],

           group         = l*[grouped_by(open, close) = peg[c(open) % expression % c(close) >> fn[xs][new caterwaul.syntax(open, xs[1])]]] in
                           peg[grouped_by('(', ')') / grouped_by('[', ']') / grouped_by('{', '}')],

           atom          = l*[quoted_operator = peg[c('_') % operator >> fn[xs][xs.join('')]],
                              number_options  = peg[c(/\d+/, 1) / c(/\d*\.\d+([eE][-+]?\d+)?/, 1) >> fn[xs][xs[0]]],
                              string_options  = peg[(c(/'([^'\\]|\\.)*/, 1) % c("'")) / (c(/"([^"\\]|\\.)*/, 1) % c('"')) >> fn[xs][xs[0][0] + xs[1]]]] in
                           peg[quoted_operator / number_options / string_options / identifier / group],

           space         = peg[c(/\s+/, 1)],
           spaced(x)     = peg[space % x % space >> fn[xs][xs[1]]],

           // Eta-expansion of binary operators is required to support recursion
           binary(op, l, inductive, base) = l*[p(x) = p(x), p = peg[l % [op % p] >> fn[xs][xs[1] ? inductive(xs[0], xs[1][0], xs[1][1]) : base ? base(xs[0]) : xs[0]]]] in p,
           prefix(op, l, inductive, base) = l*[p(x) = p(x), p = peg[(op % p >> fn[xs][inductive(xs[0], xs[1])]) / (l >> fn[x][base ? base(x) : x])]] in p,

           tight_join    = peg[atom[1] >> fn[xs][seq[~xs /![new caterwaul.syntax('tjoin', _, _0)]]]],
           tight_prefix  = peg[prefix(operator,                  tight_join,   fn[   op, r][new caterwaul.syntax(op, r)])],
           tight_binary  = peg[binary(seq(operator, opt(space)), tight_prefix, fn[l, op, r][new caterwaul.syntax(op[0], l, r)])],
           loose_join    = peg[binary(space,                     tight_binary, fn[l, op, r][new caterwaul.syntax('ljoin', l, r)])],
           loose_prefix  = peg[prefix(seq(operator, space),      loose_join,   fn[   op, r][new caterwaul.syntax(op[0], r)])],
           loose_binary  = peg[binary(spaced(operator),          loose_prefix, fn[l, op, r][new caterwaul.syntax(op, l, r)])],
           commas        = peg[binary(c(/\s*,\s*/, 1),           loose_binary, fn[l, op, r][new caterwaul.syntax(',', l, r)])],
           expression    = commas]});
__e6479094702b4bb87b20286c17973a23
meta::sdoc('js::test/basic', <<'__fda2ad5560c5dae01d0cb28ceafb0eae');
Basic tests for the lexer/parser.

caterwaul.clone('std figment')(function () {
  el('foo', 'foo'),

  eq('foo', qs[foo]),
  eq('_foo_', qs[_foo_]),

  eq('(_foo_)', qse[qg[_foo_]]),
  eq('[_foo_]', qse[[_foo_]]),

  eq('foo+bar', qs[foo + bar]),
  eq('foo+bar-bif', qs[foo + _x].replace({_x: qs[bar - bif]})),
  eq('foo+bar - bif', qs[foo + bar - bif]),
  eq('foo +bar', qs[foo + _x].replace({_x: qs[+bar] /se[_.data = '+']}) /se[_.data = 'ljoin']),
  eq('"foo"bar', qs["foo" + bar] /se[_.data = 'tjoin']),

  eq('+bif', qs[+bif] /se[_.data = '+']),
  eq('-%%!$`bif', qs[+bif] /se[_.data = '-%%!$`']),
  eq('bar.bif', qs[bar.bif]),

  eq('"foo"', qs["foo"]),
  eq('"foo bar"', qs["foo bar"]),

  eq('foo^^%bar', qs[foo + bar] /se[_.data = '^^%']),
  where*[count       = 0,
         equal(a, b) = ++count /se[a === b || null['#{a} should === #{b} (#{count})']],
         el(s, t)    = equal(caterwaul.figment.lex(s), t),
         eq(s, t)    = equal(qs[_x].replace({_x: caterwaul.figment.parse(s)}).toString(), t.toString())]})();
__fda2ad5560c5dae01d0cb28ceafb0eae
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('eval', <<'__eb0b1058649eb2d833f348540516b358');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__eb0b1058649eb2d833f348540516b358
meta::template('failing_conditional', <<'__5c593329b434a7044f68cec4b77e8ed9');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__5c593329b434a7044f68cec4b77e8ed9
meta::template('include', <<'__e0624844a65ae41e0217dd871fc0dbfb');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__e0624844a65ae41e0217dd871fc0dbfb
meta::vim_highlighter('figment', <<'__4da8e33d88087f77a3c184e60c6dfe63');
" Vim syntax file
" Language:   Figment
" Maintainer: Spencer Tipping <spencer@spencertipping.com>
" URL:        http://spencertipping.com/figment/figment.vim

" Normally this isn't the file you end up using. Rather, you source it from
" inside another syntax file that provides further definitions.

if !exists("main_syntax")
  if exists("b:current_syntax")
    finish
  endif
  let main_syntax = "figment"
endif

syn case match
syn sync fromstart
setlocal iskeyword=39,45,47,48-57,33,63,a-z,A-Z,95       " Digits, single quote, _, -, /, ?, !, and letters

" Operators.
syn match figOperator /[-~`!@#$%^&*+=\\:;,.\/?<>]\+'*/
syn match figOperator /\<_[-/a-zA-Z_0-9]\+['!?]*/

  hi link figOperator Operator

" High-level comment syntax (re-embedding relevant parts of SDoc)
syn region figBlockComment      start=/\(^$\n^\|\%^\)\s*[A-Z|]/ end=/^$\|\%$/ contains=figSDocHeader,figSDocNumberedList keepend
syn match  figSDocHeader        /\(^$\n^\|\%^\)\s*[A-Z].\{,60\}\.$/ contained
syn region figSDocNumberedList  start=/^\s*|\s*\d\{1,2\}\.\s\{1,2\}[A-Za-z]/me=e-1 end=/^$\|\%$/ contains=sdNumberedItem transparent
syn match  figSDocNumberedItem  /^\s*|\?\s*\d\{1,2\}\.\s\{1,2\}/ contained

syn match  figLineComment       /[-\/]\s*[A-Z].*$/

  hi link figBlockComment       Comment
  hi link figLineComment        Comment
  hi link figSDocHeader         Special
  hi link figSDocNumberedItem   Special

" Brackets of various sorts.
syn match figStrayBracket /[)\]}]/

syn region figRoundBrackets  matchgroup=figRoundBracket  start=/(/  end=/)/ transparent
syn region figSquareBrackets matchgroup=figSquareBracket start=/\[/ end=/]/ transparent
syn region figCurlyBrackets  matchgroup=figCurlyBracket  start=/{/  end=/}/ transparent

syn cluster figBrackets add=figRoundBrackets,figSquareBrackets,figCurlyBrackets

syn match figRoundError  /[\]}]/ contained containedin=figRoundBrackets
syn match figSquareError /[)}]/  contained containedin=figSquareBrackets
syn match figCurlyError  /[)\]]/ contained containedin=figCurlyBrackets

  hi link figStrayBracket       Error
  hi link figRoundError         Error
  hi link figSquareError        Error
  hi link figCurlyError         Error

  hi link figRoundBracket       Special
  hi link figSquareBracket      Special
  hi link figCurlyBracket       Special

" Quotation and unquotation.
syn region figQuoted matchgroup=figQuotation start=/\<q[a-pr-z]\+(/            end=/)/      contains=figUnquote,figEscape,@figBrackets
syn region figQuoted matchgroup=figQuotation start=/\<q[a-pr-z]\+\[/           end=/]/      contains=figUnquote,figEscape,@figBrackets
syn region figQuoted matchgroup=figQuotation start=/\<q[a-pr-z]\+{/            end=/}/      contains=figUnquote,figEscape,@figBrackets
syn region figQuoted matchgroup=figQuotation start=/\<q[a-pr-z]\+\z([+/"'|]\)/ end=/\z1\|$/ contains=figUnquote,figEscape

syn region figSingleString matchgroup=figStringDelimiter start=/\<'/ end=/'/ contains=figUnquote,figEscape
syn region figDoubleString matchgroup=figStringDelimiter start=/"/   end=/"/ contains=figUnquote,figEscape

syn match  figEscape /\\./ contained
syn region figUnquote matchgroup=figUnquotation start=/Q(/            end=/)/      contained contains=TOP
syn region figUnquote matchgroup=figUnquotation start=/Q\[/           end=/]/      contained contains=TOP
syn region figUnquote matchgroup=figUnquotation start=/Q{/            end=/}/      contained contains=TOP
syn region figUnquote matchgroup=figUnquotation start=/Q\z(["'+/|]\)/ end=/\z1\|$/ contained contains=TOP

syn region figLiteralQuoted matchgroup=figLiteralQuotation start=/\<q[A-Z][a-z]*(/            end=/)/ contains=@figBrackets
syn region figLiteralQuoted matchgroup=figLiteralQuotation start=/\<q[A-Z][a-z]*\[/           end=/]/ contains=@figBrackets
syn region figLiteralQuoted matchgroup=figLiteralQuotation start=/\<q[A-Z][a-z]*{/            end=/}/ contains=@figBrackets
syn region figLiteralQuoted matchgroup=figLiteralQuotation start=/\<q[A-Z][a-z]*\z([+/"'|]\)/ end=/\z1/

  hi link figQuoted           String
  hi link figStringDelimiter  Special
  hi link figSingleString     String
  hi link figDoubleString     String
  hi link figEscape           Special
  hi link figQuotation        Special
  hi link figUnquotation      Special
  hi link figLiteralQuoted    String
  hi link figLiteralQuotation String

" Numbers.
syn match figInteger /\<\d\+/
syn match figFloat   /\<\d\+\(\.\d*\)\?\([eE][-+]\?\d\+\)\?/
syn match figFloat   /\<\d*\.\d\+\([eE][-+]\?\d\+\)\?/

  hi link figInteger Number
  hi link figFloat   Number
  hi link figFloat   Number

let b:current_syntax = "figment"
__4da8e33d88087f77a3c184e60c6dfe63
internal::main();

__END__